{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udf0d \u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Google Earth Engine \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e07\u0e32\u0e19\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19 \u00b6 \u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e2d\u0e1a\u0e23\u0e21\u0e40\u0e0a\u0e34\u0e07\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23 2\u20133 \u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19 2568 \u0e08\u0e31\u0e14\u0e17\u0e33\u0e42\u0e14\u0e22 GISTNORTH \u2013 \u0e21\u0e2b\u0e32\u0e27\u0e34\u0e17\u0e22\u0e32\u0e25\u0e31\u0e22\u0e40\u0e0a\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e21\u0e48 \ud83e\udded \u0e40\u0e1b\u0e49\u0e32\u0e2b\u0e21\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49 \u00b6 \u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e02\u0e36\u0e49\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e08\u0e49\u0e32\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19 \u0e19\u0e31\u0e01\u0e27\u0e34\u0e0a\u0e32\u0e01\u0e32\u0e23 \u0e41\u0e25\u0e30\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e23\u0e30\u0e1a\u0e1a\u0e20\u0e39\u0e21\u0e34\u0e2a\u0e32\u0e23\u0e2a\u0e19\u0e40\u0e17\u0e28 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Google Earth Engine (GEE) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e34\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e \u0e42\u0e14\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e23\u0e22\u0e32\u0e22 \u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e04\u0e49\u0e14 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 GEE \u0e04\u0e23\u0e2d\u0e1a\u0e04\u0e25\u0e38\u0e21\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19 \u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e20\u0e32\u0e1e\u0e16\u0e48\u0e32\u0e22\u0e14\u0e32\u0e27\u0e40\u0e17\u0e35\u0e22\u0e21\u0e41\u0e1a\u0e1a Cloud-based \u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Web App \u0e14\u0e49\u0e27\u0e22 GEE UI \u0e01\u0e32\u0e23\u0e08\u0e33\u0e41\u0e19\u0e01\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e34\u0e19 \u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e32\u0e21\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e20\u0e31\u0e22\u0e1e\u0e34\u0e1a\u0e31\u0e15\u0e34 \u0e40\u0e0a\u0e48\u0e19 \u0e19\u0e49\u0e33\u0e17\u0e48\u0e27\u0e21-\u0e20\u0e31\u0e22\u0e41\u0e25\u0e49\u0e07 \ud83d\udce5 \u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23\u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 \u00b6 \ud83d\udd17 PDF \u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e2d\u0e1a\u0e23\u0e21 (gee_workshop.pdf) \ud83d\udda5\ufe0f \u0e2a\u0e44\u0e25\u0e14\u0e4c\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e2d\u0e1a\u0e23\u0e21 \ud83d\udcc1 \u0e42\u0e04\u0e49\u0e14\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1a\u0e17 \u0e23\u0e39\u0e49\u0e08\u0e31\u0e01\u0e01\u0e31\u0e1a Google Earth Engine (GEE) \u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 GEE Code Editor \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e25\u0e30\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 GEE \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 JavaScript \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a GEE GEE Objects \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e34\u0e07\u0e27\u0e31\u0e15\u0e16\u0e38 \u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e20\u0e32\u0e1e\u0e14\u0e32\u0e27\u0e40\u0e17\u0e35\u0e22\u0e21 \u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e2d\u0e1b\u0e1e\u0e25\u0e34\u0e40\u0e04\u0e0a\u0e31\u0e19 GEE App \u0e01\u0e32\u0e23\u0e08\u0e33\u0e41\u0e19\u0e01\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e17\u0e35\u0e48\u0e14\u0e34\u0e19\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e32\u0e21\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e20\u0e31\u0e22\u0e1e\u0e34\u0e1a\u0e31\u0e15\u0e34 \ud83d\udcdd \u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33 \u00b6 \u0e28\u0e31\u0e01\u0e14\u0e34\u0e4c\u0e14\u0e32 \u0e2b\u0e2d\u0e21\u0e2b\u0e27\u0e25 \u0e41\u0e25\u0e30\u0e0a\u0e27\u0e34\u0e28 \u0e28\u0e23\u0e35\u0e21\u0e13\u0e35 \u0e28\u0e39\u0e19\u0e22\u0e4c\u0e20\u0e39\u0e21\u0e34\u0e20\u0e32\u0e04\u0e40\u0e17\u0e04\u0e42\u0e19\u0e42\u0e25\u0e22\u0e35\u0e2d\u0e27\u0e01\u0e32\u0e28\u0e41\u0e25\u0e30\u0e20\u0e39\u0e21\u0e34\u0e2a\u0e32\u0e23\u0e2a\u0e19\u0e40\u0e17\u0e28 (\u0e20\u0e32\u0e04\u0e40\u0e2b\u0e19\u0e37\u0e2d) \u0e20\u0e32\u0e04\u0e27\u0e34\u0e0a\u0e32\u0e20\u0e39\u0e21\u0e34\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c \u0e04\u0e13\u0e30\u0e2a\u0e31\u0e07\u0e04\u0e21\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c \u0e21\u0e2b\u0e32\u0e27\u0e34\u0e17\u0e22\u0e32\u0e25\u0e31\u0e22\u0e40\u0e0a\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e21\u0e48 \ud83d\udcc5 \u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19 2568 CC BY-NC 4.0","title":"\u0e2b\u0e19\u0e49\u0e32\u0e41\u0e23\u0e01"},{"location":"#google-earth-engine","text":"\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e2d\u0e1a\u0e23\u0e21\u0e40\u0e0a\u0e34\u0e07\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23 2\u20133 \u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19 2568 \u0e08\u0e31\u0e14\u0e17\u0e33\u0e42\u0e14\u0e22 GISTNORTH \u2013 \u0e21\u0e2b\u0e32\u0e27\u0e34\u0e17\u0e22\u0e32\u0e25\u0e31\u0e22\u0e40\u0e0a\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e21\u0e48","title":"\ud83c\udf0d \u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Google Earth Engine \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e07\u0e32\u0e19\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19"},{"location":"#_1","text":"\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e02\u0e36\u0e49\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e08\u0e49\u0e32\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19 \u0e19\u0e31\u0e01\u0e27\u0e34\u0e0a\u0e32\u0e01\u0e32\u0e23 \u0e41\u0e25\u0e30\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e23\u0e30\u0e1a\u0e1a\u0e20\u0e39\u0e21\u0e34\u0e2a\u0e32\u0e23\u0e2a\u0e19\u0e40\u0e17\u0e28 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Google Earth Engine (GEE) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e34\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e \u0e42\u0e14\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e23\u0e22\u0e32\u0e22 \u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e04\u0e49\u0e14 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 GEE \u0e04\u0e23\u0e2d\u0e1a\u0e04\u0e25\u0e38\u0e21\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19 \u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e20\u0e32\u0e1e\u0e16\u0e48\u0e32\u0e22\u0e14\u0e32\u0e27\u0e40\u0e17\u0e35\u0e22\u0e21\u0e41\u0e1a\u0e1a Cloud-based \u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Web App \u0e14\u0e49\u0e27\u0e22 GEE UI \u0e01\u0e32\u0e23\u0e08\u0e33\u0e41\u0e19\u0e01\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e34\u0e19 \u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e32\u0e21\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e20\u0e31\u0e22\u0e1e\u0e34\u0e1a\u0e31\u0e15\u0e34 \u0e40\u0e0a\u0e48\u0e19 \u0e19\u0e49\u0e33\u0e17\u0e48\u0e27\u0e21-\u0e20\u0e31\u0e22\u0e41\u0e25\u0e49\u0e07","title":"\ud83e\udded \u0e40\u0e1b\u0e49\u0e32\u0e2b\u0e21\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49"},{"location":"#_2","text":"\ud83d\udd17 PDF \u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e2d\u0e1a\u0e23\u0e21 (gee_workshop.pdf) \ud83d\udda5\ufe0f \u0e2a\u0e44\u0e25\u0e14\u0e4c\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e2d\u0e1a\u0e23\u0e21 \ud83d\udcc1 \u0e42\u0e04\u0e49\u0e14\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1a\u0e17 \u0e23\u0e39\u0e49\u0e08\u0e31\u0e01\u0e01\u0e31\u0e1a Google Earth Engine (GEE) \u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 GEE Code Editor \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e25\u0e30\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 GEE \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 JavaScript \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a GEE GEE Objects \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e34\u0e07\u0e27\u0e31\u0e15\u0e16\u0e38 \u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e20\u0e32\u0e1e\u0e14\u0e32\u0e27\u0e40\u0e17\u0e35\u0e22\u0e21 \u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e2d\u0e1b\u0e1e\u0e25\u0e34\u0e40\u0e04\u0e0a\u0e31\u0e19 GEE App \u0e01\u0e32\u0e23\u0e08\u0e33\u0e41\u0e19\u0e01\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e17\u0e35\u0e48\u0e14\u0e34\u0e19\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e32\u0e21\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e20\u0e31\u0e22\u0e1e\u0e34\u0e1a\u0e31\u0e15\u0e34","title":"\ud83d\udce5 \u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23\u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07"},{"location":"#_3","text":"\u0e28\u0e31\u0e01\u0e14\u0e34\u0e4c\u0e14\u0e32 \u0e2b\u0e2d\u0e21\u0e2b\u0e27\u0e25 \u0e41\u0e25\u0e30\u0e0a\u0e27\u0e34\u0e28 \u0e28\u0e23\u0e35\u0e21\u0e13\u0e35 \u0e28\u0e39\u0e19\u0e22\u0e4c\u0e20\u0e39\u0e21\u0e34\u0e20\u0e32\u0e04\u0e40\u0e17\u0e04\u0e42\u0e19\u0e42\u0e25\u0e22\u0e35\u0e2d\u0e27\u0e01\u0e32\u0e28\u0e41\u0e25\u0e30\u0e20\u0e39\u0e21\u0e34\u0e2a\u0e32\u0e23\u0e2a\u0e19\u0e40\u0e17\u0e28 (\u0e20\u0e32\u0e04\u0e40\u0e2b\u0e19\u0e37\u0e2d) \u0e20\u0e32\u0e04\u0e27\u0e34\u0e0a\u0e32\u0e20\u0e39\u0e21\u0e34\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c \u0e04\u0e13\u0e30\u0e2a\u0e31\u0e07\u0e04\u0e21\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c \u0e21\u0e2b\u0e32\u0e27\u0e34\u0e17\u0e22\u0e32\u0e25\u0e31\u0e22\u0e40\u0e0a\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e21\u0e48 \ud83d\udcc5 \u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19 2568 CC BY-NC 4.0","title":"\ud83d\udcdd \u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33"},{"location":"gee_workshop_chapter1/","text":"URL to Earth Engine Code Editor \u00b6 https://earthengine.google.com","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 1"},{"location":"gee_workshop_chapter1/#url-to-earth-engine-code-editor","text":"https://earthengine.google.com","title":"URL to Earth Engine Code Editor"},{"location":"gee_workshop_chapter2/","text":"URL to Earth Engine Code Editor \u00b6 https://earthengine.google.com","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 2"},{"location":"gee_workshop_chapter2/#url-to-earth-engine-code-editor","text":"https://earthengine.google.com","title":"URL to Earth Engine Code Editor"},{"location":"gee_workshop_chapter3/","text":"URL to Earth Engine Data Catalog \u00b6 : # https://developers.google.com/earth-engine/datasets URL to Earth Engine API Documentation \u00b6 : # https://developers.google.com/earth-engine/api_docs URL to Earth Engine JavaScript API Documentation \u00b6 : # https://developers.google.com/earth-engine/guides/getstarted URL to Earth Engine Community Tutorials (\u0e41\u0e19\u0e30\u0e19\u0e33\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a) \u00b6 : # https://developers.google.com/earth-engine/tutorials","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 3"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-data-catalog","text":": # https://developers.google.com/earth-engine/datasets","title":"URL to Earth Engine Data Catalog"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-api-documentation","text":": # https://developers.google.com/earth-engine/api_docs","title":"URL to Earth Engine API Documentation"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-javascript-api-documentation","text":": # https://developers.google.com/earth-engine/guides/getstarted","title":"URL to Earth Engine JavaScript API Documentation"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-community-tutorials","text":": # https://developers.google.com/earth-engine/tutorials","title":"URL to Earth Engine Community Tutorials (\u0e41\u0e19\u0e30\u0e19\u0e33\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a)"},{"location":"gee_workshop_chapter4/","text":"basic JavaScript guide for Google Earth Engine (GEE) development: 4.1 Variables and Data Types \u00b6 // 1.Variable declaration var number = 42 ; // Number var text = \"Hello, Earth!\" ; // String var boolean = true ; // Boolean var list = [ 1 , 2 , 3 , 4 ]; // Array var object = { key : \"value\" }; // Object // 1.Array variable var array = [ 1 , 2 , 3 , 4 , 5 ]; // 3.Accessing array elements var firstElement = array [ 0 ]; // 1 // 4.Modifying array elements array [ 1 ] = 10 ; // [1, 10, 3, 4, 5] // 5.Object variable var obj = { name : \"Earth\" , age : 4.5 }; obj . name = \"Mars\" ; // {name: \"Mars\", age: 4.5} // 6.Accessing object properties var name = obj . name ; // \"Mars\" // Modifying object properties obj . age = 4.6 ; // {name: \"Mars\", age: 4.6} // 7.Earth Engine objects var numList = ee . List ([ 1 , 2 , 3 , 4 , 5 ]); var image = ee . Image ( \"LANDSAT/LC08/C01/T1/LC08_044034_20140318\" ); var geometry = ee . Geometry . Point ([ - 122.082 , 37.42 ]); 4.2 Comment \u00b6 // Single line comment /* Multi-line comment This is a multi-line comment that spans multiple lines. */ 4.3 Functions \u00b6 1.Client-side function \u00b6 // 8.function declaration function showMessage () { print ( 'Hello, Earth Engine!' ); } // 9.call the function showMessage (); // 10.Function with parameters function addNumbers ( a , b ) { return a + b ; } var sum = addNumbers ( 5 , 10 ); // 15 2.Earth Engine function \u00b6 // 11.Earth Engine function var roi = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // 12.Define a function to calculate NDVI for one image function calcNDVI ( image ) { // Compute normalized difference of bands B8 and B4 return image . normalizedDifference ([ 'B8' , 'B4' ]) . rename ( 'NDVI' ); } // 13.Apply the function to every image in the collection var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-01-31' ) . filterBounds ( roi ); var ndviCollection = collection . map ( calcNDVI ); // 14.Compute the median composite of NDVI var medianNDVI = ndviCollection . median (); Map . addLayer ( medianNDVI , { min : 0 , max : 1 }, 'Median NDVI' ); 4.4 if\u2026else Statements \u00b6 1.Client-side if\u2026else \u00b6 // 15.Client-side if\u2026else var x = 7 ; var y = 5 ; // 16.Simple if-else to compare JS numbers if ( x > y ) { print ( 'x is greater than y' ); // prints: x is greater than y } else if ( x === y ) { print ( 'x is equal to y' ); } else { print ( 'x is less than y' ); } 2.Earth Engine if\u2026else \u00b6 // 17.Earth Engine if\u2026else var image = ee . Image ( 'LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103' ); var ndvi = image . normalizedDifference ([ 'B5' , 'B4' ]); var threshold = 0.5 ; var mask = ndvi . gt ( threshold ); var maskedImage = image . updateMask ( mask ); Map . addLayer ( maskedImage , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Masked Image' ); // 18.ee.Algorithms.If var condition = ee . Number ( 5 ); var result = ee . Algorithms . If ( condition . gt ( 0 ), 'Positive' , 'Negative' ); print ( 'Result:' , result ); 4.5 Loops \u00b6 // 19.Client-side for loop for ( var i = 0 ; i < 5 ; i ++ ) { print ( 'Iteration:' , i ); } // 20.Client-side while loop var j = 0 ; while ( j < 5 ) { print ( 'While loop iteration:' , j ); j ++ ; } // 21.map function var numbers = [ 1 , 2 , 3 , 4 , 5 ]; var squaredNumbers = numbers . map ( function ( num ) { return num * num ; }); print ( 'Squared Numbers:' , squaredNumbers ); // [1, 4, 9, 16, 25] // 22.Server-side for loop var serverList = ee . List ([ 1 , 2 , 3 , 4 , 5 ]); var serverSquared = serverList . map ( function ( num ) { return ee . Number ( num ). multiply ( ee . Number ( num )); }); print ( 'Server Squared:' , serverSquared ); // [1, 4, 9, 16, 25] // 23.Earth Engine map function var collection = ee . ImageCollection ( 'LANDSAT/LC08/C01/T1' ); var ndviCollection = collection . map ( function ( image ) { return image . normalizedDifference ([ 'B5' , 'B4' ]). rename ( 'NDVI' ); }); 4.6 Object \u00b6 // 24.Object creation var Car = { wheels : 4 , door : 2 , start : function () { print ( 'Car started' ); return this ; } }; // 25.Accessing object properties var tota = Car ; print ( 'Toyota wheels:' , tota . wheels ); tota . color = \"red\" ; print ( 'Tota color:' , tota . color ); tota . start (); var hoda = Car ; hoda . door = 5 ; print ( 'Hoda door:' , hoda . door ); // 26.Object methods tota . drive = function () { print ( 'Car is driving' ); return this ; }; // tota.drive(); tota . stop = function () { print ( 'Car stopped' ); return this ; }; // tota.stop(); // 27.Method chaining tota . start (). drive (). stop (); 4.7 EE Objects and Methods \u00b6 1.Earth Engine objects \u00b6 // 28.Earth Engine objects for geometry and feature var geometry = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // 29.methods of Earth Engine objects for geometry var feature = ee . Feature ( geometry , { name : 'Chiang Mai' }); print ( 'Feature:' , feature ); // methods of Earth Engine objects var area = feature . geometry (). area (); print ( 'Area:' , area ); // Map methods Map . centerObject ( feature , 10 ); Map . addLayer ( feature , { color : 'red' }, 'Feature' ); 2.Earth Engine objects for image and image collection \u00b6 // 30.Earth Engine objects for image var image = ee . Image ( 'LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103' ); // methods of Earth Engine objects for image var bandNames = image . bandNames (); print ( 'Band names:' , bandNames ); var bandCount = image . bandNames (). length (); print ( 'Band count:' , bandCount ); var band4 = image . select ( 'B4' ); print ( 'Band 4:' , band4 ); Map . centerObject ( image , 10 ); Map . addLayer ( image , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 0.3000 }, 'RGB' ); // 31.Earth Engine objects for image collection var dataset = ee . ImageCollection ( 'LANDSAT/LC09/C02/T1_TOA' ) . filterDate ( '2024-01-01' , '2024-03-30' ) // Filter method by date; var trueColor432 = dataset . select ([ 'B4' , 'B3' , 'B2' ]); var trueColor432Vis = { min : 0.0 , max : 0.4 , }; Map . setCenter ( 98.9616 , 18.7137 ); Map . addLayer ( trueColor432 , trueColor432Vis , 'True Color (432)' ); 4.8 Method Chaining \u00b6 // 32.Method chaining for Earth Engine objects var image = ee . Image ( 'LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103' ); var band4 = image . select ( 'B4' ); var band3 = image . select ( 'B3' ); var band2 = image . select ( 'B2' ); var rgb = band4 . addBands ( band3 ). addBands ( band2 ); image . select ([ 'B4' , 'B3' , 'B2' ]) Map . centerObject ( image , 10 ); Map . addLayer ( image , { min : 0 , max : 3000 }, 'RGB' ); // 33.Method chaining for Earth Engine objects with ImageCollection var collection = ee . ImageCollection ( 'LANDSAT/LC09/C02/T1_TOA' ) . filterDate ( '2024-01-01' , '2024-03-30' ) . filterBounds ( geometry ) . select ([ 'B4' , 'B3' , 'B2' ]) . mean (); Map . centerObject ( geometry , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Mean Image' ); // Chaining methods with functions function calculateNDVI ( image ) { return image . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); } var filtered = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-01-31' ) . filterBounds ( geometry ) . map ( calculateNDVI ) . select ( 'NDVI' ) . mean (); Map . centerObject ( geometry , 10 ); Map . addLayer ( filtered , { min : 0 , max : 1 }, 'Mean NDVI' );","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 4"},{"location":"gee_workshop_chapter4/#41-variables-and-data-types","text":"// 1.Variable declaration var number = 42 ; // Number var text = \"Hello, Earth!\" ; // String var boolean = true ; // Boolean var list = [ 1 , 2 , 3 , 4 ]; // Array var object = { key : \"value\" }; // Object // 1.Array variable var array = [ 1 , 2 , 3 , 4 , 5 ]; // 3.Accessing array elements var firstElement = array [ 0 ]; // 1 // 4.Modifying array elements array [ 1 ] = 10 ; // [1, 10, 3, 4, 5] // 5.Object variable var obj = { name : \"Earth\" , age : 4.5 }; obj . name = \"Mars\" ; // {name: \"Mars\", age: 4.5} // 6.Accessing object properties var name = obj . name ; // \"Mars\" // Modifying object properties obj . age = 4.6 ; // {name: \"Mars\", age: 4.6} // 7.Earth Engine objects var numList = ee . List ([ 1 , 2 , 3 , 4 , 5 ]); var image = ee . Image ( \"LANDSAT/LC08/C01/T1/LC08_044034_20140318\" ); var geometry = ee . Geometry . Point ([ - 122.082 , 37.42 ]);","title":"4.1 Variables and Data Types"},{"location":"gee_workshop_chapter4/#42-comment","text":"// Single line comment /* Multi-line comment This is a multi-line comment that spans multiple lines. */","title":"4.2 Comment"},{"location":"gee_workshop_chapter4/#43-functions","text":"","title":"4.3 Functions"},{"location":"gee_workshop_chapter4/#1client-side-function","text":"// 8.function declaration function showMessage () { print ( 'Hello, Earth Engine!' ); } // 9.call the function showMessage (); // 10.Function with parameters function addNumbers ( a , b ) { return a + b ; } var sum = addNumbers ( 5 , 10 ); // 15","title":"1.Client-side function"},{"location":"gee_workshop_chapter4/#2earth-engine-function","text":"// 11.Earth Engine function var roi = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // 12.Define a function to calculate NDVI for one image function calcNDVI ( image ) { // Compute normalized difference of bands B8 and B4 return image . normalizedDifference ([ 'B8' , 'B4' ]) . rename ( 'NDVI' ); } // 13.Apply the function to every image in the collection var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-01-31' ) . filterBounds ( roi ); var ndviCollection = collection . map ( calcNDVI ); // 14.Compute the median composite of NDVI var medianNDVI = ndviCollection . median (); Map . addLayer ( medianNDVI , { min : 0 , max : 1 }, 'Median NDVI' );","title":"2.Earth Engine function"},{"location":"gee_workshop_chapter4/#44-ifelse-statements","text":"","title":"4.4 if\u2026else Statements"},{"location":"gee_workshop_chapter4/#1client-side-ifelse","text":"// 15.Client-side if\u2026else var x = 7 ; var y = 5 ; // 16.Simple if-else to compare JS numbers if ( x > y ) { print ( 'x is greater than y' ); // prints: x is greater than y } else if ( x === y ) { print ( 'x is equal to y' ); } else { print ( 'x is less than y' ); }","title":"1.Client-side if\u2026else"},{"location":"gee_workshop_chapter4/#2earth-engine-ifelse","text":"// 17.Earth Engine if\u2026else var image = ee . Image ( 'LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103' ); var ndvi = image . normalizedDifference ([ 'B5' , 'B4' ]); var threshold = 0.5 ; var mask = ndvi . gt ( threshold ); var maskedImage = image . updateMask ( mask ); Map . addLayer ( maskedImage , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Masked Image' ); // 18.ee.Algorithms.If var condition = ee . Number ( 5 ); var result = ee . Algorithms . If ( condition . gt ( 0 ), 'Positive' , 'Negative' ); print ( 'Result:' , result );","title":"2.Earth Engine if\u2026else"},{"location":"gee_workshop_chapter4/#45-loops","text":"// 19.Client-side for loop for ( var i = 0 ; i < 5 ; i ++ ) { print ( 'Iteration:' , i ); } // 20.Client-side while loop var j = 0 ; while ( j < 5 ) { print ( 'While loop iteration:' , j ); j ++ ; } // 21.map function var numbers = [ 1 , 2 , 3 , 4 , 5 ]; var squaredNumbers = numbers . map ( function ( num ) { return num * num ; }); print ( 'Squared Numbers:' , squaredNumbers ); // [1, 4, 9, 16, 25] // 22.Server-side for loop var serverList = ee . List ([ 1 , 2 , 3 , 4 , 5 ]); var serverSquared = serverList . map ( function ( num ) { return ee . Number ( num ). multiply ( ee . Number ( num )); }); print ( 'Server Squared:' , serverSquared ); // [1, 4, 9, 16, 25] // 23.Earth Engine map function var collection = ee . ImageCollection ( 'LANDSAT/LC08/C01/T1' ); var ndviCollection = collection . map ( function ( image ) { return image . normalizedDifference ([ 'B5' , 'B4' ]). rename ( 'NDVI' ); });","title":"4.5 Loops"},{"location":"gee_workshop_chapter4/#46-object","text":"// 24.Object creation var Car = { wheels : 4 , door : 2 , start : function () { print ( 'Car started' ); return this ; } }; // 25.Accessing object properties var tota = Car ; print ( 'Toyota wheels:' , tota . wheels ); tota . color = \"red\" ; print ( 'Tota color:' , tota . color ); tota . start (); var hoda = Car ; hoda . door = 5 ; print ( 'Hoda door:' , hoda . door ); // 26.Object methods tota . drive = function () { print ( 'Car is driving' ); return this ; }; // tota.drive(); tota . stop = function () { print ( 'Car stopped' ); return this ; }; // tota.stop(); // 27.Method chaining tota . start (). drive (). stop ();","title":"4.6 Object"},{"location":"gee_workshop_chapter4/#47-ee-objects-and-methods","text":"","title":"4.7 EE Objects and Methods"},{"location":"gee_workshop_chapter4/#1earth-engine-objects","text":"// 28.Earth Engine objects for geometry and feature var geometry = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // 29.methods of Earth Engine objects for geometry var feature = ee . Feature ( geometry , { name : 'Chiang Mai' }); print ( 'Feature:' , feature ); // methods of Earth Engine objects var area = feature . geometry (). area (); print ( 'Area:' , area ); // Map methods Map . centerObject ( feature , 10 ); Map . addLayer ( feature , { color : 'red' }, 'Feature' );","title":"1.Earth Engine objects"},{"location":"gee_workshop_chapter4/#2earth-engine-objects-for-image-and-image-collection","text":"// 30.Earth Engine objects for image var image = ee . Image ( 'LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103' ); // methods of Earth Engine objects for image var bandNames = image . bandNames (); print ( 'Band names:' , bandNames ); var bandCount = image . bandNames (). length (); print ( 'Band count:' , bandCount ); var band4 = image . select ( 'B4' ); print ( 'Band 4:' , band4 ); Map . centerObject ( image , 10 ); Map . addLayer ( image , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 0.3000 }, 'RGB' ); // 31.Earth Engine objects for image collection var dataset = ee . ImageCollection ( 'LANDSAT/LC09/C02/T1_TOA' ) . filterDate ( '2024-01-01' , '2024-03-30' ) // Filter method by date; var trueColor432 = dataset . select ([ 'B4' , 'B3' , 'B2' ]); var trueColor432Vis = { min : 0.0 , max : 0.4 , }; Map . setCenter ( 98.9616 , 18.7137 ); Map . addLayer ( trueColor432 , trueColor432Vis , 'True Color (432)' );","title":"2.Earth Engine objects for image and image collection"},{"location":"gee_workshop_chapter4/#48-method-chaining","text":"// 32.Method chaining for Earth Engine objects var image = ee . Image ( 'LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103' ); var band4 = image . select ( 'B4' ); var band3 = image . select ( 'B3' ); var band2 = image . select ( 'B2' ); var rgb = band4 . addBands ( band3 ). addBands ( band2 ); image . select ([ 'B4' , 'B3' , 'B2' ]) Map . centerObject ( image , 10 ); Map . addLayer ( image , { min : 0 , max : 3000 }, 'RGB' ); // 33.Method chaining for Earth Engine objects with ImageCollection var collection = ee . ImageCollection ( 'LANDSAT/LC09/C02/T1_TOA' ) . filterDate ( '2024-01-01' , '2024-03-30' ) . filterBounds ( geometry ) . select ([ 'B4' , 'B3' , 'B2' ]) . mean (); Map . centerObject ( geometry , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Mean Image' ); // Chaining methods with functions function calculateNDVI ( image ) { return image . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); } var filtered = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-01-31' ) . filterBounds ( geometry ) . map ( calculateNDVI ) . select ( 'NDVI' ) . mean (); Map . centerObject ( geometry , 10 ); Map . addLayer ( filtered , { min : 0 , max : 1 }, 'Mean NDVI' );","title":"4.8 Method Chaining"},{"location":"gee_workshop_chapter5/","text":"5.1 Image \u00b6 1.Image object \u00b6 // 1. Image object var image = ee . Image ( 'LANDSAT/LC09/C02/T1_L2/LC09_129050_20231220' ) . multiply ( 0.0000275 ); var band4 = image . select ( 'SR_B4' ); var band3 = image . select ( 'SR_B3' ); var band2 = image . select ( 'SR_B2' ); var rgb = band4 . addBands ( band3 ). addBands ( band2 ); Map . centerObject ( image , 10 ); Map . addLayer ( rgb , { min : 0.2 , max : 0.6 , gamma : 2.0 }, 'RGB' ); 2.Image from ImageCollection \u00b6 // 2. Image from ImageCollection var bangkok = ee . Geometry . Point ([ 100.5018 , 13.7563 ]); //3. Load Landsat 9 Surface Reflectance data var landsat9 = ee . ImageCollection ( 'LANDSAT/LC09/C02/T1_L2' ) . filterBounds ( bangkok ) . filterDate ( '2023-01-01' , '2023-12-31' ) . sort ( 'CLOUD_COVER' ) . first (); // 4.Select optical bands var image = landsat9 . select ([ 'SR_B1' , 'SR_B2' , 'SR_B3' , 'SR_B4' , 'SR_B5' ]); // 5. Convert optical bands to reflectance var opticalBands = image . select ( 'SR_B.' ). multiply ( 0.0000275 ); // 6. Set metadata properties var image = opticalBands . set ({ 'system:time_start' : landsat9 . get ( 'system:time_start' ), 'ACQUISITION_DATE' : landsat9 . date (). format ( 'YYYY-MM-dd' ), 'SPACECRAFT_ID' : landsat9 . get ( 'SPACECRAFT_ID' ), 'CLOUD_COVER' : landsat9 . get ( 'CLOUD_COVER' ) }); // 7. Print image metadata and band names print ( 'Landsat 9 Image Metadata:' , image ); print ( 'Acquisition Date:' , image . get ( 'ACQUISITION_DATE' )); print ( 'Available Band Names:' , image . bandNames ()); // 8. Define visualization parameters for true color var trueColor = { bands : [ 'SR_B4' , 'SR_B3' , 'SR_B2' ], min : 0.2 , max : 0.7 , gamma : 2.0 }; // 9. Add the image to the map Map . centerObject ( bangkok , 10 ); Map . addLayer ( image , trueColor , 'Landsat 9 True Color' ); 5.2 Image Collection \u00b6 // 10. Image Collection object var geometry = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2_SR_HARMONIZED' ) . filterDate ( '2021-01-01' , '2021-01-31' ) . filterBounds ( geometry ) . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) . select ([ 'B4' , 'B3' , 'B2' ]) . median () . multiply ( 0.0001 ); Map . centerObject ( geometry , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0.0 , max : 0.3 , gamma : 1.5 }, 'Median Image' ); 5.3 Geometry \u00b6 // 11. Geometry object var point = ee . Geometry . Point ([ 98.9171009716561 , 18.815619476862654 ]); var line = ee . Geometry . LineString ([[ 98.9171009716561 , 18.815619476862654 ], [ 99.0873890575936 , 18.68557890893041 ]]); var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var buffer = point . buffer ( 1000 ); // Buffer of 1000 meters var centroid = polygon . centroid (); var area = polygon . area (); // Area of the polygon // 12. Print geometries and properties print ( 'Point:' , point ); print ( 'Line:' , line ); print ( 'Polygon:' , polygon ); print ( 'Buffer:' , buffer ); print ( 'Centroid:' , centroid ); print ( 'Area:' , area ); // Map visualization Map . centerObject ( polygon , 10 ); Map . addLayer ( point , { color : 'yellow' }, 'Point' ); Map . addLayer ( line , { color : 'orange' }, 'Line' ); Map . addLayer ( polygon , { color : 'red' }, 'Polygon' ); Map . addLayer ( buffer , { color : 'blue' }, 'Buffer' ); Map . addLayer ( centroid , { color : 'green' }, 'Centroid' ); 5.4 Feature \u00b6 // 13. Feature object var point = ee . Geometry . Point ([ 98.9171009716561 , 18.815619476862654 ]); var feature = ee . Feature ( point , { name : 'Chiang Mai' , population : 1000000 }); print ( 'Feature:' , feature ); // Polygon feature var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var feature = ee . Feature ( polygon , { name : 'Chiang Mai' , population : 1000000 }); print ( 'Feature:' , feature ); // add to map Map . centerObject ( feature , 10 ); Map . addLayer ( feature , { color : 'red' }, 'Feature' ); 5.5 Feature Collection \u00b6 // 14. Feature Collection object var point1 = ee . Geometry . Point ([ 98.9171009716561 , 18.815619476862654 ]); var point2 = ee . Geometry . Point ([ 99.0873890575936 , 18.68557890893041 ]); var feature1 = ee . Feature ( point1 , { name : 'Chiang Mai' , population : 1000000 }); var feature2 = ee . Feature ( point2 , { name : 'Sarapee' , population : 8000000 }); var featureCollection = ee . FeatureCollection ([ feature1 , feature2 ]); print ( 'Feature Collection:' , featureCollection ); // add to map Map . centerObject ( featureCollection , 10 ); Map . addLayer ( featureCollection , { color : 'red' }, 'Feature Collection' ); 5.6 Reducer \u00b6 // 15. Reducer object across time var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ); // Compute per-pixel mean across time var meanTime = s2 . reduce ( ee . Reducer . mean ()); Map . addLayer ( meanTime , { bands : [ 'B4_mean' , 'B3_mean' , 'B2_mean' ], min : 0 , max : 3000 }, 'Mean per Pixel over Time' ); 1.Histogram \u00b6 // 16. Histogram var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ); var months = ee . List . sequence ( 1 , 12 ); var monthlyCount = months . map ( function ( m ) { var filtered = s2 . filter ( ee . Filter . calendarRange ( m , m , 'month' )); return filtered . size (); }); print ( 'Images per month (2021):' , monthlyCount ); // add histogram chart var chart = ui . Chart . array . values ( monthlyCount , 0 , months ) . setChartType ( 'ColumnChart' ) . setOptions ({ title : 'Monthly Image Count (2021)' , hAxis : { title : 'Month' }, vAxis : { title : 'Image Count' }, legend : { position : 'none' } }); print ( chart ); 2.Image statistics (reduceRegion) \u00b6 // 17. Regional statistics (reduceRegion) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-03-31' ) . filterBounds ( polygon ); var meanTime = s2 . reduce ( ee . Reducer . mean ()); // Regional statistics (reduceRegion) var stats = meanTime . reduceRegion ({ reducer : ee . Reducer . mean (). combine ({ reducer2 : ee . Reducer . max (), sharedInputs : true }), geometry : polygon , scale : 30 }); print ( 'Mean & Max over polygon:' , stats ); 3.Neighborhood / Focal operations (reduceNeighborhood) \u00b6 // 18. Neighborhood / Focal operations (reduceNeighborhood) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ); var meanTime = s2 . reduce ( ee . Reducer . mean ()); // Neighborhood / Focal operations (reduceNeighborhood) var focalMean = meanTime . reduceNeighborhood ({ reducer : ee . Reducer . mean (), kernel : ee . Kernel . square ({ radius : 1 }) }); Map . addLayer ( focalMean , { min : 0 , max : 3000 }, '3\u00d73 Focal Mean' ); 4.Reduce minMax \u00b6 var minMax = dataset . reduceRegion ({ reducer : ee . Reducer . minMax (), geometry : geometry , scale : 100 , maxPixels : 1e9 }); print ( '\u0e04\u0e48\u0e32 min/max \u0e02\u0e2d\u0e07 NDVI:' , minMax ); 5.Per-band summary (reduceRegion on multiband) \u00b6 // 19. Per-band summary (reduceRegion on multiband) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-03-31' ) . filterBounds ( polygon ); var composite = s2 . median (); var bandStats = composite . reduceRegion ({ reducer : ee . Reducer . mean (), geometry : polygon , scale : 100 }); print ( 'Mean per band:' , bandStats ); 6.Across-band summary (reduceRegion on multiband) \u00b6 // 20. Across-band reduction (reduce) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ) . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) . select ([ 'B8' , 'B4' ]); var ndviCollection = s2 . map ( function ( img ) { var ndvi = img . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); return ndvi . copyProperties ( img , img . propertyNames ()); }); var meanNDVI = ndviCollection . reduce ( ee . Reducer . mean ()); Map . addLayer ( meanNDVI , { min : - 1.0 , max : 1.0 }, 'mean across Bands' ); 5.7 join \u00b6 // 21. Join operation var points = ee . FeatureCollection ([ ee . Feature ( ee . Geometry . Point ([ 100.5 , 13.7 ]), { pid : 1 }), ee . Feature ( ee . Geometry . Point ([ 100.55 , 13.75 ]), { pid : 2 }) ]); var polygons = ee . FeatureCollection ([ ee . Feature ( ee . Geometry . Rectangle ([ 100.4 , 13.6 , 100.6 , 13.8 ]), { zone : 'A' }), ee . Feature ( ee . Geometry . Rectangle ([ 100.45 , 13.65 , 100.65 , 13.85 ]), { zone : 'B' }) ]); // Create a spatial filter: point within polygon var spatialFilter = ee . Filter . contains ({ leftField : '.geo' , // polygon geometry rightField : '.geo' // point geometry }); // Perform an inner spatial join var spatialJoin = ee . Join . inner (); var spatialJoined = spatialJoin . apply ( polygons , points , spatialFilter ); // Attach point property 'pid' to each polygon var result = spatialJoined . map ( function ( f ) { var poly = ee . Feature ( f . get ( 'primary' )); var pt = ee . Feature ( f . get ( 'secondary' )); return poly . set ( 'point_id' , pt . get ( 'pid' )); }); // Display on the map Map . centerObject ( polygons , 10 ); // Polygons in blue Map . addLayer ( polygons , { color : 'blue' }, 'Polygons' ); // Points in black Map . addLayer ( points , { color : 'black' }, 'Points' ); // Spatially-joined polygons with attached pid in purple Map . addLayer ( result , { color : 'purple' }, 'Spatial Join' );","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 5"},{"location":"gee_workshop_chapter5/#51-image","text":"","title":"5.1 Image"},{"location":"gee_workshop_chapter5/#1image-object","text":"// 1. Image object var image = ee . Image ( 'LANDSAT/LC09/C02/T1_L2/LC09_129050_20231220' ) . multiply ( 0.0000275 ); var band4 = image . select ( 'SR_B4' ); var band3 = image . select ( 'SR_B3' ); var band2 = image . select ( 'SR_B2' ); var rgb = band4 . addBands ( band3 ). addBands ( band2 ); Map . centerObject ( image , 10 ); Map . addLayer ( rgb , { min : 0.2 , max : 0.6 , gamma : 2.0 }, 'RGB' );","title":"1.Image object"},{"location":"gee_workshop_chapter5/#2image-from-imagecollection","text":"// 2. Image from ImageCollection var bangkok = ee . Geometry . Point ([ 100.5018 , 13.7563 ]); //3. Load Landsat 9 Surface Reflectance data var landsat9 = ee . ImageCollection ( 'LANDSAT/LC09/C02/T1_L2' ) . filterBounds ( bangkok ) . filterDate ( '2023-01-01' , '2023-12-31' ) . sort ( 'CLOUD_COVER' ) . first (); // 4.Select optical bands var image = landsat9 . select ([ 'SR_B1' , 'SR_B2' , 'SR_B3' , 'SR_B4' , 'SR_B5' ]); // 5. Convert optical bands to reflectance var opticalBands = image . select ( 'SR_B.' ). multiply ( 0.0000275 ); // 6. Set metadata properties var image = opticalBands . set ({ 'system:time_start' : landsat9 . get ( 'system:time_start' ), 'ACQUISITION_DATE' : landsat9 . date (). format ( 'YYYY-MM-dd' ), 'SPACECRAFT_ID' : landsat9 . get ( 'SPACECRAFT_ID' ), 'CLOUD_COVER' : landsat9 . get ( 'CLOUD_COVER' ) }); // 7. Print image metadata and band names print ( 'Landsat 9 Image Metadata:' , image ); print ( 'Acquisition Date:' , image . get ( 'ACQUISITION_DATE' )); print ( 'Available Band Names:' , image . bandNames ()); // 8. Define visualization parameters for true color var trueColor = { bands : [ 'SR_B4' , 'SR_B3' , 'SR_B2' ], min : 0.2 , max : 0.7 , gamma : 2.0 }; // 9. Add the image to the map Map . centerObject ( bangkok , 10 ); Map . addLayer ( image , trueColor , 'Landsat 9 True Color' );","title":"2.Image from ImageCollection"},{"location":"gee_workshop_chapter5/#52-image-collection","text":"// 10. Image Collection object var geometry = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2_SR_HARMONIZED' ) . filterDate ( '2021-01-01' , '2021-01-31' ) . filterBounds ( geometry ) . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) . select ([ 'B4' , 'B3' , 'B2' ]) . median () . multiply ( 0.0001 ); Map . centerObject ( geometry , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0.0 , max : 0.3 , gamma : 1.5 }, 'Median Image' );","title":"5.2 Image Collection"},{"location":"gee_workshop_chapter5/#53-geometry","text":"// 11. Geometry object var point = ee . Geometry . Point ([ 98.9171009716561 , 18.815619476862654 ]); var line = ee . Geometry . LineString ([[ 98.9171009716561 , 18.815619476862654 ], [ 99.0873890575936 , 18.68557890893041 ]]); var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var buffer = point . buffer ( 1000 ); // Buffer of 1000 meters var centroid = polygon . centroid (); var area = polygon . area (); // Area of the polygon // 12. Print geometries and properties print ( 'Point:' , point ); print ( 'Line:' , line ); print ( 'Polygon:' , polygon ); print ( 'Buffer:' , buffer ); print ( 'Centroid:' , centroid ); print ( 'Area:' , area ); // Map visualization Map . centerObject ( polygon , 10 ); Map . addLayer ( point , { color : 'yellow' }, 'Point' ); Map . addLayer ( line , { color : 'orange' }, 'Line' ); Map . addLayer ( polygon , { color : 'red' }, 'Polygon' ); Map . addLayer ( buffer , { color : 'blue' }, 'Buffer' ); Map . addLayer ( centroid , { color : 'green' }, 'Centroid' );","title":"5.3 Geometry"},{"location":"gee_workshop_chapter5/#54-feature","text":"// 13. Feature object var point = ee . Geometry . Point ([ 98.9171009716561 , 18.815619476862654 ]); var feature = ee . Feature ( point , { name : 'Chiang Mai' , population : 1000000 }); print ( 'Feature:' , feature ); // Polygon feature var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var feature = ee . Feature ( polygon , { name : 'Chiang Mai' , population : 1000000 }); print ( 'Feature:' , feature ); // add to map Map . centerObject ( feature , 10 ); Map . addLayer ( feature , { color : 'red' }, 'Feature' );","title":"5.4 Feature"},{"location":"gee_workshop_chapter5/#55-feature-collection","text":"// 14. Feature Collection object var point1 = ee . Geometry . Point ([ 98.9171009716561 , 18.815619476862654 ]); var point2 = ee . Geometry . Point ([ 99.0873890575936 , 18.68557890893041 ]); var feature1 = ee . Feature ( point1 , { name : 'Chiang Mai' , population : 1000000 }); var feature2 = ee . Feature ( point2 , { name : 'Sarapee' , population : 8000000 }); var featureCollection = ee . FeatureCollection ([ feature1 , feature2 ]); print ( 'Feature Collection:' , featureCollection ); // add to map Map . centerObject ( featureCollection , 10 ); Map . addLayer ( featureCollection , { color : 'red' }, 'Feature Collection' );","title":"5.5 Feature Collection"},{"location":"gee_workshop_chapter5/#56-reducer","text":"// 15. Reducer object across time var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ); // Compute per-pixel mean across time var meanTime = s2 . reduce ( ee . Reducer . mean ()); Map . addLayer ( meanTime , { bands : [ 'B4_mean' , 'B3_mean' , 'B2_mean' ], min : 0 , max : 3000 }, 'Mean per Pixel over Time' );","title":"5.6 Reducer"},{"location":"gee_workshop_chapter5/#1histogram","text":"// 16. Histogram var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ); var months = ee . List . sequence ( 1 , 12 ); var monthlyCount = months . map ( function ( m ) { var filtered = s2 . filter ( ee . Filter . calendarRange ( m , m , 'month' )); return filtered . size (); }); print ( 'Images per month (2021):' , monthlyCount ); // add histogram chart var chart = ui . Chart . array . values ( monthlyCount , 0 , months ) . setChartType ( 'ColumnChart' ) . setOptions ({ title : 'Monthly Image Count (2021)' , hAxis : { title : 'Month' }, vAxis : { title : 'Image Count' }, legend : { position : 'none' } }); print ( chart );","title":"1.Histogram"},{"location":"gee_workshop_chapter5/#2image-statistics-reduceregion","text":"// 17. Regional statistics (reduceRegion) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-03-31' ) . filterBounds ( polygon ); var meanTime = s2 . reduce ( ee . Reducer . mean ()); // Regional statistics (reduceRegion) var stats = meanTime . reduceRegion ({ reducer : ee . Reducer . mean (). combine ({ reducer2 : ee . Reducer . max (), sharedInputs : true }), geometry : polygon , scale : 30 }); print ( 'Mean & Max over polygon:' , stats );","title":"2.Image statistics (reduceRegion)"},{"location":"gee_workshop_chapter5/#3neighborhood-focal-operations-reduceneighborhood","text":"// 18. Neighborhood / Focal operations (reduceNeighborhood) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ); var meanTime = s2 . reduce ( ee . Reducer . mean ()); // Neighborhood / Focal operations (reduceNeighborhood) var focalMean = meanTime . reduceNeighborhood ({ reducer : ee . Reducer . mean (), kernel : ee . Kernel . square ({ radius : 1 }) }); Map . addLayer ( focalMean , { min : 0 , max : 3000 }, '3\u00d73 Focal Mean' );","title":"3.Neighborhood / Focal operations (reduceNeighborhood)"},{"location":"gee_workshop_chapter5/#4reduce-minmax","text":"var minMax = dataset . reduceRegion ({ reducer : ee . Reducer . minMax (), geometry : geometry , scale : 100 , maxPixels : 1e9 }); print ( '\u0e04\u0e48\u0e32 min/max \u0e02\u0e2d\u0e07 NDVI:' , minMax );","title":"4.Reduce minMax"},{"location":"gee_workshop_chapter5/#5per-band-summary-reduceregion-on-multiband","text":"// 19. Per-band summary (reduceRegion on multiband) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-03-31' ) . filterBounds ( polygon ); var composite = s2 . median (); var bandStats = composite . reduceRegion ({ reducer : ee . Reducer . mean (), geometry : polygon , scale : 100 }); print ( 'Mean per band:' , bandStats );","title":"5.Per-band summary (reduceRegion on multiband)"},{"location":"gee_workshop_chapter5/#6across-band-summary-reduceregion-on-multiband","text":"// 20. Across-band reduction (reduce) var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2021-01-01' , '2021-12-31' ) . filterBounds ( polygon ) . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) . select ([ 'B8' , 'B4' ]); var ndviCollection = s2 . map ( function ( img ) { var ndvi = img . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); return ndvi . copyProperties ( img , img . propertyNames ()); }); var meanNDVI = ndviCollection . reduce ( ee . Reducer . mean ()); Map . addLayer ( meanNDVI , { min : - 1.0 , max : 1.0 }, 'mean across Bands' );","title":"6.Across-band summary (reduceRegion on multiband)"},{"location":"gee_workshop_chapter5/#57-join","text":"// 21. Join operation var points = ee . FeatureCollection ([ ee . Feature ( ee . Geometry . Point ([ 100.5 , 13.7 ]), { pid : 1 }), ee . Feature ( ee . Geometry . Point ([ 100.55 , 13.75 ]), { pid : 2 }) ]); var polygons = ee . FeatureCollection ([ ee . Feature ( ee . Geometry . Rectangle ([ 100.4 , 13.6 , 100.6 , 13.8 ]), { zone : 'A' }), ee . Feature ( ee . Geometry . Rectangle ([ 100.45 , 13.65 , 100.65 , 13.85 ]), { zone : 'B' }) ]); // Create a spatial filter: point within polygon var spatialFilter = ee . Filter . contains ({ leftField : '.geo' , // polygon geometry rightField : '.geo' // point geometry }); // Perform an inner spatial join var spatialJoin = ee . Join . inner (); var spatialJoined = spatialJoin . apply ( polygons , points , spatialFilter ); // Attach point property 'pid' to each polygon var result = spatialJoined . map ( function ( f ) { var poly = ee . Feature ( f . get ( 'primary' )); var pt = ee . Feature ( f . get ( 'secondary' )); return poly . set ( 'point_id' , pt . get ( 'pid' )); }); // Display on the map Map . centerObject ( polygons , 10 ); // Polygons in blue Map . addLayer ( polygons , { color : 'blue' }, 'Polygons' ); // Points in black Map . addLayer ( points , { color : 'black' }, 'Points' ); // Spatially-joined polygons with attached pid in purple Map . addLayer ( result , { color : 'purple' }, 'Spatial Join' );","title":"5.7 join"},{"location":"gee_workshop_chapter6/","text":"6.1 images properties \u00b6 // 1. images properties var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) . filterBounds ( polygon ) . select ([ 'B4' , 'B3' , 'B2' ]) // 2. get properties of the image collection // get image count var imageCount = collection . size (); print ( 'Image Count:' , imageCount ); // get image list var imageList = collection . toList ( imageCount ); print ( 'Image List:' , imageList ); // get first image var firstImage = ee . Image ( imageList . get ( 0 )); print ( 'First Image:' , firstImage ); // get image properties var imageProperties = firstImage . propertyNames (); print ( 'Image Properties:' , imageProperties ); // get image bands var imageBands = firstImage . bandNames (); print ( 'Image Bands:' , imageBands ); // get image metadata var imageMetadata = firstImage . getInfo (); print ( 'Image Metadata:' , imageMetadata ); // get image date var imageDate = firstImage . date (); print ( 'Image Date:' , imageDate ); // get image geometry var imageGeometry = firstImage . geometry (); print ( 'Image Geometry:' , imageGeometry ); // get image scale var imageScale = firstImage . select ( 'B4' ). projection (). nominalScale (); print ( 'Image Scale:' , imageScale ); // get image projection var imageProjection = firstImage . select ( 'B4' ). projection (); print ( 'Image Projection:' , imageProjection ); Map . centerObject ( polygon , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); 6.2 Map object \u00b6 // 3. Map object var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) . filterBounds ( polygon ) Map . centerObject ( collection , 8 ); Map . addLayer ( collection , // eeObject { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, // visParams 'Image Collection' , // name true , // shown (hidden by default) 0.8 // opacity (80% transparent) ); 6.3 Viuslization \u00b6 // 4. study area var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // 5. vector visualization var countries = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ) . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); var countryStyle = { color : 'FF0000' , // Red outline fillColor : 'FF000022' , // Translucent red fill width : 1 // 1-pixel wide border }; Map . addLayer ( countries , // eeObject countryStyle , // visParams 'Country Borders' , // name false , // shown (hidden by default) 1.0 // opacity (fully opaque) ); // 6. ImageCollection visualization var countryStyle = { color : 'FF0000' , // Red outline fillColor : 'FF000022' , // Translucent red fill width : 1 // 1-pixel wide border }; var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) . filterBounds ( polygon ); var rgbVis = { bands : [ 'B4' , 'B3' , 'B2' ], // Use red, green, blue bands min : 0 , // Map pixel values from 0 max : 3000 , // to 3000 gamma : 1.1 // Apply slight gamma correction }; Map . centerObject ( collection , 8 ); Map . addLayer ( collection , // eeObject rgbVis , // visParams 'Sentinel-2 RGB' , // name true , // shown 0.8 // opacity ); // 7. Image visualization var dem = ee . Image ( 'USGS/SRTMGL1_003' ); var demVis = { min : 0 , // lowest elevation (meters) max : 3000 , // highest elevation (meters) palette : [ '0000ff' , // deep water (if below 0) '00ffff' , // sea level '00ff00' , // lowlands 'ffff00' , // mid elevations 'ff7f00' , // high elevations 'ffffff' // peaks ] }; Map . addLayer ( dem , // eeObject demVis , // visParams 'SRTM DEM' , // name false , // shown (hidden by default) 0.5 // opacity (50% transparent) ); 6.4 Filter \u00b6 // 8. Filter var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) // Filter method by date Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); // Filter by bounds var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) // Filter method by date . filterBounds ( polygon ) // Filter method by bounds Map . centerObject ( polygon , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); // Filter by cloudy pixel percentage var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) // Filter method by date . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) // Filter method by property . filterBounds ( polygon ) // Filter method by bounds Map . centerObject ( polygon , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); // Filter country var countries = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ) . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); // Filter method by property Map . centerObject ( countries , 10 ); Map . addLayer ( countries , { color : 'red' }, 'Country' ); 6.5 Band and band selection \u00b6 1.Create a median composite and select bands \u00b6 // 9. Create a median composite and select bands var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // Load the Sentinel-2 ImageCollection and filter by date & ROI var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Print band names and image property keys to the Console print ( 'Band names:' , composite . bandNames ()); print ( 'Image property names:' , composite . propertyNames ()); // Define visualization parameters // True Color: Red = B4, Green = B3, Blue = B2 var trueColorVis = { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 , gamma : 0.5 }; // False Color (NIR + Red + Green): NIR = B8, Red = B4, Green = B3 var falseColorVis = { bands : [ 'B8' , 'B4' , 'B3' ], min : 0 , max : 3000 , gamma : 0.5 }; // Center the Map on the composite and add the layers Map . centerObject ( polygon ); Map . addLayer ( composite , trueColorVis , 'True Color Composite' ); Map . addLayer ( composite , falseColorVis , 'False Color Composite' , false , 0.8 ); 2.Band selection and add to new object \u00b6 // 10. Band selection and add to new object var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // Load the Sentinel-2 ImageCollection and filter by date & ROI var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select single bands var band4 = composite . select ( 'B4' ); var band3 = composite . select ( 'B3' ); var band2 = composite . select ( 'B2' ); // rename bands band4 = band4 . rename ( 'Red' ); band3 = band3 . rename ( 'Green' ); band2 = band2 . rename ( 'Blue' ); var rgbSingleBand = band4 . addBands ( band3 ). addBands ( band2 ); // Select multiple bands name var rgbMultiBand = composite . select ([ 'B4' , 'B3' , 'B2' ]); Map . centerObject ( polygon , 10 ); Map . addLayer ( rgbSingleBand , { min : 0 , max : 3000 }, 'RGB select from single band' ); Map . addLayer ( rgbMultiBand , { min : 0 , max : 3000 }, 'RGB select from multiple band' ); 6.6 Band math \u00b6 1.Calculate NDVI using band math \u00b6 // 11. Calculate NDVI using band math var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band Map . centerObject ( polygon , 10 ); Map . addLayer ( composite , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'RGB Composite' ); // Calculate NDVI var ndvi = nirBand . subtract ( redBand ). divide ( nirBand . add ( redBand )). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Print NDVI image print ( 'NDVI Image:' , compositeWithNDVI ); // Define visualization parameters for NDVI var ndviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Add NDVI layer to the map Map . addLayer ( compositeWithNDVI . select ( 'NDVI' ), ndviVis , 'NDVI' ); 2.Calculate NDVI using normalizedDifference() method \u00b6 // 12. Calculate NDVI using normalizedDifference() method var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // normalizedDifference() method var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Print NDVI image print ( 'NDVI Image:' , compositeWithNDVI ); // Define visualization parameters for NDVI var ndviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Add NDVI layer to the map Map . addLayer ( compositeWithNDVI . select ( 'NDVI' ), ndviVis , 'NDVI' ); 3.Calculate EVI using image.expression() and band math \u00b6 // 13. Calculate EVI using image.expression() and band math var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select bands for EVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band var blueBand = composite . select ( 'B2' ); // Blue band // Calculate EVI with image.expression var evi_exp = composite . expression ( '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))' , { 'NIR' : nirBand , 'RED' : redBand , 'BLUE' : blueBand }). rename ( 'EVIexp' ); // Calculate EVI with band math var evi_funct = nirBand . subtract ( redBand ). divide ( nirBand . add ( redBand . multiply ( 6 )). subtract ( blueBand . multiply ( 7.5 )). add ( 1 )). multiply ( 2.5 ). rename ( 'EVIfunct' ); // Add EVI to the composite var compositeWithEVIexp = composite . addBands ( evi_exp ); var compositeWithEVIfunct = composite . addBands ( evi_funct ); // Print EVI image print ( 'EVI Image:' , compositeWithEVIexp ); print ( 'EVI Image:' , compositeWithEVIfunct ); // Define visualization parameters for EVI var eviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Add EVI layer to the map Map . addLayer ( compositeWithEVIexp . select ( 'EVIexp' ), eviVis , 'EVI' ); Map . addLayer ( compositeWithEVIfunct . select ( 'EVIfunct' ), eviVis , 'EVI' ); 6.7 Clipping \u00b6 1.Clipping an image with a polygon \u00b6 // 14. Clipping an image with a polygon var polygon = ee . Geometry . Polygon ( [[[ 98.39692831218161 , 18.837049183879376 ], [ 98.39692831218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.837049183879376 ]]]); var dem = ee . Image ( 'USGS/SRTMGL1_003' ); // Clip the DEM with polygon var clippedDem = dem . clip ( polygon ); Map . centerObject ( polygon , 10 ); Map . addLayer ( clippedDem , { palette : [ '#a6611a' , '#dfc27d' , '#f5f5f5' , '#80cdc1' , '#018571' ], min : 250 , max : 1000 }, 'Clipped DEM' ); 2.Clipping an image collection with a polygon \u00b6 // 15. Clipping an image collection with a polygon var polygon = ee . Geometry . Polygon ( [[[ 98.39692831218161 , 18.837049183879376 ], [ 98.39692831218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.837049183879376 ]]]); function clipImage ( image ) { return image . clip ( polygon ); } var clippedComposite = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ) . map ( clipImage ) . median () Map . centerObject ( polygon , 10 ); Map . addLayer ( clippedComposite , { bands : [ 'B4' , 'B3' , 'B2' ], min : 500 , max : 3000 }, 'Clipped Composite' ); 6.8 Import data from assets \u00b6 // 16. Import data from assets var cm_province = ee . FeatureCollection ( \"projects/ee-sakda-451407/assets/cm_province_4326\" ); // define visualization parameters var visParams = { color : 'red' , width : 1 }; Map . centerObject ( cm_province ); Map . addLayer ( cm_province , visParams , 'Chiang Mai Province' ); 6.9 Export data \u00b6 1.Export an image to Google Drive \u00b6 // 17. Export an image to Google Drive var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // Calculate NDVI var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Export the NDVI image to Google Drive Export . image . toDrive ({ image : compositeWithNDVI . select ( 'NDVI' ), description : 'NDVI_Export' , scale : 30 , region : polygon , maxPixels : 1e13 }); 2.Export a feature collection to Google Drive \u00b6 // 18. Export a feature collection to Google Drive var countries = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ); var thailandBorder = countries . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); // Export the feature collection to Google Drive Export . table . toDrive ({ collection : thailandBorder , description : 'CM_Province_Export' , fileFormat : 'SHP' }); 3.Export an image to Google Earth Engine assets \u00b6 // 19. Export an image to Google Earth Engine assets var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // Calculate NDVI var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Export the NDVI image to Google Earth Engine assets Export . image . toAsset ({ image : compositeWithNDVI . select ( 'NDVI' ), description : 'NDVI_Export_Asset' , assetId : 'projects/your_project/assets/NDVI_Export_Asset' , // Change 'your_project' to your project ID scale : 30 , region : polygon , maxPixels : 1e13 });","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 6"},{"location":"gee_workshop_chapter6/#61-images-properties","text":"// 1. images properties var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) . filterBounds ( polygon ) . select ([ 'B4' , 'B3' , 'B2' ]) // 2. get properties of the image collection // get image count var imageCount = collection . size (); print ( 'Image Count:' , imageCount ); // get image list var imageList = collection . toList ( imageCount ); print ( 'Image List:' , imageList ); // get first image var firstImage = ee . Image ( imageList . get ( 0 )); print ( 'First Image:' , firstImage ); // get image properties var imageProperties = firstImage . propertyNames (); print ( 'Image Properties:' , imageProperties ); // get image bands var imageBands = firstImage . bandNames (); print ( 'Image Bands:' , imageBands ); // get image metadata var imageMetadata = firstImage . getInfo (); print ( 'Image Metadata:' , imageMetadata ); // get image date var imageDate = firstImage . date (); print ( 'Image Date:' , imageDate ); // get image geometry var imageGeometry = firstImage . geometry (); print ( 'Image Geometry:' , imageGeometry ); // get image scale var imageScale = firstImage . select ( 'B4' ). projection (). nominalScale (); print ( 'Image Scale:' , imageScale ); // get image projection var imageProjection = firstImage . select ( 'B4' ). projection (); print ( 'Image Projection:' , imageProjection ); Map . centerObject ( polygon , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' );","title":"6.1 images properties"},{"location":"gee_workshop_chapter6/#62-map-object","text":"// 3. Map object var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) . filterBounds ( polygon ) Map . centerObject ( collection , 8 ); Map . addLayer ( collection , // eeObject { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, // visParams 'Image Collection' , // name true , // shown (hidden by default) 0.8 // opacity (80% transparent) );","title":"6.2 Map object"},{"location":"gee_workshop_chapter6/#63-viuslization","text":"// 4. study area var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // 5. vector visualization var countries = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ) . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); var countryStyle = { color : 'FF0000' , // Red outline fillColor : 'FF000022' , // Translucent red fill width : 1 // 1-pixel wide border }; Map . addLayer ( countries , // eeObject countryStyle , // visParams 'Country Borders' , // name false , // shown (hidden by default) 1.0 // opacity (fully opaque) ); // 6. ImageCollection visualization var countryStyle = { color : 'FF0000' , // Red outline fillColor : 'FF000022' , // Translucent red fill width : 1 // 1-pixel wide border }; var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) . filterBounds ( polygon ); var rgbVis = { bands : [ 'B4' , 'B3' , 'B2' ], // Use red, green, blue bands min : 0 , // Map pixel values from 0 max : 3000 , // to 3000 gamma : 1.1 // Apply slight gamma correction }; Map . centerObject ( collection , 8 ); Map . addLayer ( collection , // eeObject rgbVis , // visParams 'Sentinel-2 RGB' , // name true , // shown 0.8 // opacity ); // 7. Image visualization var dem = ee . Image ( 'USGS/SRTMGL1_003' ); var demVis = { min : 0 , // lowest elevation (meters) max : 3000 , // highest elevation (meters) palette : [ '0000ff' , // deep water (if below 0) '00ffff' , // sea level '00ff00' , // lowlands 'ffff00' , // mid elevations 'ff7f00' , // high elevations 'ffffff' // peaks ] }; Map . addLayer ( dem , // eeObject demVis , // visParams 'SRTM DEM' , // name false , // shown (hidden by default) 0.5 // opacity (50% transparent) );","title":"6.3 Viuslization"},{"location":"gee_workshop_chapter6/#64-filter","text":"// 8. Filter var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) // Filter method by date Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); // Filter by bounds var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) // Filter method by date . filterBounds ( polygon ) // Filter method by bounds Map . centerObject ( polygon , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); // Filter by cloudy pixel percentage var collection = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-01-01' , '2025-03-31' ) // Filter method by date . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) // Filter method by property . filterBounds ( polygon ) // Filter method by bounds Map . centerObject ( polygon , 10 ); Map . addLayer ( collection , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'Image Collection' ); // Filter country var countries = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ) . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); // Filter method by property Map . centerObject ( countries , 10 ); Map . addLayer ( countries , { color : 'red' }, 'Country' );","title":"6.4 Filter"},{"location":"gee_workshop_chapter6/#65-band-and-band-selection","text":"","title":"6.5 Band and band selection"},{"location":"gee_workshop_chapter6/#1create-a-median-composite-and-select-bands","text":"// 9. Create a median composite and select bands var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // Load the Sentinel-2 ImageCollection and filter by date & ROI var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Print band names and image property keys to the Console print ( 'Band names:' , composite . bandNames ()); print ( 'Image property names:' , composite . propertyNames ()); // Define visualization parameters // True Color: Red = B4, Green = B3, Blue = B2 var trueColorVis = { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 , gamma : 0.5 }; // False Color (NIR + Red + Green): NIR = B8, Red = B4, Green = B3 var falseColorVis = { bands : [ 'B8' , 'B4' , 'B3' ], min : 0 , max : 3000 , gamma : 0.5 }; // Center the Map on the composite and add the layers Map . centerObject ( polygon ); Map . addLayer ( composite , trueColorVis , 'True Color Composite' ); Map . addLayer ( composite , falseColorVis , 'False Color Composite' , false , 0.8 );","title":"1.Create a median composite and select bands"},{"location":"gee_workshop_chapter6/#2band-selection-and-add-to-new-object","text":"// 10. Band selection and add to new object var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // Load the Sentinel-2 ImageCollection and filter by date & ROI var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select single bands var band4 = composite . select ( 'B4' ); var band3 = composite . select ( 'B3' ); var band2 = composite . select ( 'B2' ); // rename bands band4 = band4 . rename ( 'Red' ); band3 = band3 . rename ( 'Green' ); band2 = band2 . rename ( 'Blue' ); var rgbSingleBand = band4 . addBands ( band3 ). addBands ( band2 ); // Select multiple bands name var rgbMultiBand = composite . select ([ 'B4' , 'B3' , 'B2' ]); Map . centerObject ( polygon , 10 ); Map . addLayer ( rgbSingleBand , { min : 0 , max : 3000 }, 'RGB select from single band' ); Map . addLayer ( rgbMultiBand , { min : 0 , max : 3000 }, 'RGB select from multiple band' );","title":"2.Band selection and add to new object"},{"location":"gee_workshop_chapter6/#66-band-math","text":"","title":"6.6 Band math"},{"location":"gee_workshop_chapter6/#1calculate-ndvi-using-band-math","text":"// 11. Calculate NDVI using band math var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band Map . centerObject ( polygon , 10 ); Map . addLayer ( composite , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'RGB Composite' ); // Calculate NDVI var ndvi = nirBand . subtract ( redBand ). divide ( nirBand . add ( redBand )). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Print NDVI image print ( 'NDVI Image:' , compositeWithNDVI ); // Define visualization parameters for NDVI var ndviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Add NDVI layer to the map Map . addLayer ( compositeWithNDVI . select ( 'NDVI' ), ndviVis , 'NDVI' );","title":"1.Calculate NDVI using band math"},{"location":"gee_workshop_chapter6/#2calculate-ndvi-using-normalizeddifference-method","text":"// 12. Calculate NDVI using normalizedDifference() method var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // normalizedDifference() method var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Print NDVI image print ( 'NDVI Image:' , compositeWithNDVI ); // Define visualization parameters for NDVI var ndviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Add NDVI layer to the map Map . addLayer ( compositeWithNDVI . select ( 'NDVI' ), ndviVis , 'NDVI' );","title":"2.Calculate NDVI using normalizedDifference() method"},{"location":"gee_workshop_chapter6/#3calculate-evi-using-imageexpression-and-band-math","text":"// 13. Calculate EVI using image.expression() and band math var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); // Create a median composite from the collection var composite = s2 . median (); // Select bands for EVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band var blueBand = composite . select ( 'B2' ); // Blue band // Calculate EVI with image.expression var evi_exp = composite . expression ( '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))' , { 'NIR' : nirBand , 'RED' : redBand , 'BLUE' : blueBand }). rename ( 'EVIexp' ); // Calculate EVI with band math var evi_funct = nirBand . subtract ( redBand ). divide ( nirBand . add ( redBand . multiply ( 6 )). subtract ( blueBand . multiply ( 7.5 )). add ( 1 )). multiply ( 2.5 ). rename ( 'EVIfunct' ); // Add EVI to the composite var compositeWithEVIexp = composite . addBands ( evi_exp ); var compositeWithEVIfunct = composite . addBands ( evi_funct ); // Print EVI image print ( 'EVI Image:' , compositeWithEVIexp ); print ( 'EVI Image:' , compositeWithEVIfunct ); // Define visualization parameters for EVI var eviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Add EVI layer to the map Map . addLayer ( compositeWithEVIexp . select ( 'EVIexp' ), eviVis , 'EVI' ); Map . addLayer ( compositeWithEVIfunct . select ( 'EVIfunct' ), eviVis , 'EVI' );","title":"3.Calculate EVI using image.expression() and band math"},{"location":"gee_workshop_chapter6/#67-clipping","text":"","title":"6.7 Clipping"},{"location":"gee_workshop_chapter6/#1clipping-an-image-with-a-polygon","text":"// 14. Clipping an image with a polygon var polygon = ee . Geometry . Polygon ( [[[ 98.39692831218161 , 18.837049183879376 ], [ 98.39692831218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.837049183879376 ]]]); var dem = ee . Image ( 'USGS/SRTMGL1_003' ); // Clip the DEM with polygon var clippedDem = dem . clip ( polygon ); Map . centerObject ( polygon , 10 ); Map . addLayer ( clippedDem , { palette : [ '#a6611a' , '#dfc27d' , '#f5f5f5' , '#80cdc1' , '#018571' ], min : 250 , max : 1000 }, 'Clipped DEM' );","title":"1.Clipping an image with a polygon"},{"location":"gee_workshop_chapter6/#2clipping-an-image-collection-with-a-polygon","text":"// 15. Clipping an image collection with a polygon var polygon = ee . Geometry . Polygon ( [[[ 98.39692831218161 , 18.837049183879376 ], [ 98.39692831218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.66149307399751 ], [ 99.62739706218161 , 18.837049183879376 ]]]); function clipImage ( image ) { return image . clip ( polygon ); } var clippedComposite = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ) . map ( clipImage ) . median () Map . centerObject ( polygon , 10 ); Map . addLayer ( clippedComposite , { bands : [ 'B4' , 'B3' , 'B2' ], min : 500 , max : 3000 }, 'Clipped Composite' );","title":"2.Clipping an image collection with a polygon"},{"location":"gee_workshop_chapter6/#68-import-data-from-assets","text":"// 16. Import data from assets var cm_province = ee . FeatureCollection ( \"projects/ee-sakda-451407/assets/cm_province_4326\" ); // define visualization parameters var visParams = { color : 'red' , width : 1 }; Map . centerObject ( cm_province ); Map . addLayer ( cm_province , visParams , 'Chiang Mai Province' );","title":"6.8 Import data from assets"},{"location":"gee_workshop_chapter6/#69-export-data","text":"","title":"6.9 Export data"},{"location":"gee_workshop_chapter6/#1export-an-image-to-google-drive","text":"// 17. Export an image to Google Drive var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // Calculate NDVI var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Export the NDVI image to Google Drive Export . image . toDrive ({ image : compositeWithNDVI . select ( 'NDVI' ), description : 'NDVI_Export' , scale : 30 , region : polygon , maxPixels : 1e13 });","title":"1.Export an image to Google Drive"},{"location":"gee_workshop_chapter6/#2export-a-feature-collection-to-google-drive","text":"// 18. Export a feature collection to Google Drive var countries = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ); var thailandBorder = countries . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); // Export the feature collection to Google Drive Export . table . toDrive ({ collection : thailandBorder , description : 'CM_Province_Export' , fileFormat : 'SHP' });","title":"2.Export a feature collection to Google Drive"},{"location":"gee_workshop_chapter6/#3export-an-image-to-google-earth-engine-assets","text":"// 19. Export an image to Google Earth Engine assets var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ); var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // Calculate NDVI var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Export the NDVI image to Google Earth Engine assets Export . image . toAsset ({ image : compositeWithNDVI . select ( 'NDVI' ), description : 'NDVI_Export_Asset' , assetId : 'projects/your_project/assets/NDVI_Export_Asset' , // Change 'your_project' to your project ID scale : 30 , region : polygon , maxPixels : 1e13 });","title":"3.Export an image to Google Earth Engine assets"},{"location":"gee_workshop_chapter7/","text":"7.1 Create UI Panel \u00b6 // Create the left \u201clayer\u201d panel var layerPanel = ui . Panel ({ layout : ui . Panel . Layout . flow ( 'vertical' ), style : { width : '300px' , backgroundColor : '#fff' , padding : '8px' } }); layerPanel . add ( ui . Label ( 'Layers' , { fontWeight : 'bold' })); // Create the centre map panel var mapPanel = ui . Map (); mapPanel . setControlVisibility ({ all : true , zoomControl : true }); mapPanel . style (). set ({ stretch : 'both' }); // fill available space mapPanel . setCenter ( 100.5 , 13.7 , 8 ); // Create the right \u201cchart\u201d panel var chartPanel = ui . Panel ({ layout : ui . Panel . Layout . flow ( 'vertical' ), style : { width : '300px' , backgroundColor : '#fff' , padding : '8px' } }); chartPanel . add ( ui . Label ( 'Chart' , { fontWeight : 'bold' })); // Combine all three in a horizontal root panel var root = ui . Panel ({ layout : ui . Panel . Layout . flow ( 'horizontal' ), style : { stretch : 'both' } }); root . add ( layerPanel ); root . add ( mapPanel ); root . add ( chartPanel ); // Render ui . root . clear (); ui . root . add ( root ); 7.2 Add layers \u00b6 // Add layers var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // convert polygon to polyline var polyline = polygon . bounds (). coordinates (). get ( 0 ); // Clip function function clipImage ( image ) { return image . clip ( polygon ); } // Calculate NDVI function function calculateNDVI ( image ) { var ndvi = image . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); return image . addBands ( ndvi ); } // Create a polyline feature var polylineFeature = ee . Feature ( ee . Geometry . LineString ( polyline ), { name : 'Polygon Boundary' }); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ) . map ( clipImage ) . map ( calculateNDVI ); var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // Calculate NDVI var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Define visualization parameters for NDVI var ndviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Define visualization parameters for the composite var compositeVis = { bands : [ 'B4' , 'B3' , 'B2' ], min : 1000 , max : 2700 , gamma : 0.5 }; // Create an NDVI layer var ndviLayer = ui . Map . Layer ( compositeWithNDVI . select ( 'NDVI' ), ndviVis , 'NDVI' , true , 0.9 ); // Add the NDVI layer to the map mapPanel . add ( ndviLayer ); // Add the polyline feature to the map var polylineLayer = ui . Map . Layer ( polylineFeature . geometry (), { color : 'red' , width : 2 }, 'Polygon Boundary' ); // Add the polyline layer to the map mapPanel . add ( polylineLayer ); // Create a true color layer var trueColorLayer = ui . Map . Layer ( composite , compositeVis , 'True Color Composite' , true , 0.9 ); // Add the true color layer to the map mapPanel . add ( trueColorLayer ); // Set center the map on the polygon mapPanel . centerObject ( polygon ); 7.3 Add checkboxes \u00b6 // Add checkboxes to the layer panel // Checkbox for NDVI var ndviCheckbox = ui . Checkbox ({ label : 'NDVI' , value : true , onChange : function ( checked ) { if ( checked ) { mapPanel . layers (). add ( ndviLayer ); } else { mapPanel . layers (). remove ( ndviLayer ); } } }); // Add the checkbox to the layer panel layerPanel . add ( ndviCheckbox ); // Checkbox for True Color var trueColorCheckbox = ui . Checkbox ({ label : 'True Color' , value : true , onChange : function ( checked ) { if ( checked ) { mapPanel . layers (). add ( trueColorLayer ); } else { mapPanel . layers (). remove ( trueColorLayer ); } } }); // Add the checkbox to the layer panel layerPanel . add ( trueColorCheckbox ); // Checkbox for Polygon Boundary var polylineCheckbox = ui . Checkbox ({ label : 'Polygon Boundary' , value : true , onChange : function ( checked ) { if ( checked ) { mapPanel . layers (). add ( polylineLayer ); } else { mapPanel . layers (). remove ( polylineLayer ); } } }); // Add the checkbox to the layer panel layerPanel . add ( polylineCheckbox ); 7.4 Add chart buttons \u00b6 // Add a button to the chart panel var chartButton = ui . Button ({ label : 'Show NDVI Chart' , onClick : function () { // Create a chart for NDVI var chart = ui . Chart . image . histogram ({ image : compositeWithNDVI . select ( 'NDVI' ), region : polygon , scale : 30 , minBucketWidth : 0.01 }). setOptions ({ title : 'NDVI Histogram' , hAxis : { title : 'NDVI' }, vAxis : { title : 'Frequency' }, lineWidth : 1 , pointSize : 0 }); // Add the chart to the chart panel chartPanel . add ( chart ); } }); // Add the button to the chart panel chartPanel . add ( chartButton ); var timeSeriesButton = ui . Button ({ label : 'Show NDVI Time Series' , onClick : function () { // Create a time series chart for NDVI var timeSeriesChart = ui . Chart . image . series ({ imageCollection : s2 . select ( 'NDVI' ), region : polygon , scale : 30 , xProperty : 'system:time_start' }). setOptions ({ title : 'NDVI Time Series' , vAxis : { title : 'NDVI' }, lineWidth : 1 , pointSize : 0 }); // Add the chart to the chart panel chartPanel . add ( timeSeriesChart ); } }); // Add the time series button to the chart panel chartPanel . add ( timeSeriesButton );","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 7"},{"location":"gee_workshop_chapter7/#71-create-ui-panel","text":"// Create the left \u201clayer\u201d panel var layerPanel = ui . Panel ({ layout : ui . Panel . Layout . flow ( 'vertical' ), style : { width : '300px' , backgroundColor : '#fff' , padding : '8px' } }); layerPanel . add ( ui . Label ( 'Layers' , { fontWeight : 'bold' })); // Create the centre map panel var mapPanel = ui . Map (); mapPanel . setControlVisibility ({ all : true , zoomControl : true }); mapPanel . style (). set ({ stretch : 'both' }); // fill available space mapPanel . setCenter ( 100.5 , 13.7 , 8 ); // Create the right \u201cchart\u201d panel var chartPanel = ui . Panel ({ layout : ui . Panel . Layout . flow ( 'vertical' ), style : { width : '300px' , backgroundColor : '#fff' , padding : '8px' } }); chartPanel . add ( ui . Label ( 'Chart' , { fontWeight : 'bold' })); // Combine all three in a horizontal root panel var root = ui . Panel ({ layout : ui . Panel . Layout . flow ( 'horizontal' ), style : { stretch : 'both' } }); root . add ( layerPanel ); root . add ( mapPanel ); root . add ( chartPanel ); // Render ui . root . clear (); ui . root . add ( root );","title":"7.1 Create UI Panel"},{"location":"gee_workshop_chapter7/#72-add-layers","text":"// Add layers var polygon = ee . Geometry . Polygon ( [[[ 98.9171009716561 , 18.815619476862654 ], [ 98.9171009716561 , 18.68557890893041 ], [ 99.0873890575936 , 18.68557890893041 ], [ 99.0873890575936 , 18.815619476862654 ]]]); // convert polygon to polyline var polyline = polygon . bounds (). coordinates (). get ( 0 ); // Clip function function clipImage ( image ) { return image . clip ( polygon ); } // Calculate NDVI function function calculateNDVI ( image ) { var ndvi = image . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); return image . addBands ( ndvi ); } // Create a polyline feature var polylineFeature = ee . Feature ( ee . Geometry . LineString ( polyline ), { name : 'Polygon Boundary' }); var s2 = ee . ImageCollection ( 'COPERNICUS/S2' ) . filterDate ( '2025-02-01' , '2025-06-28' ) . filterBounds ( polygon ) . map ( clipImage ) . map ( calculateNDVI ); var composite = s2 . median (); // Select bands for NDVI calculation var nirBand = composite . select ( 'B8' ); // NIR band var redBand = composite . select ( 'B4' ); // Red band // Calculate NDVI var ndvi = composite . normalizedDifference ([ 'B8' , 'B4' ]). rename ( 'NDVI' ); // Add NDVI to the composite var compositeWithNDVI = composite . addBands ( ndvi ); // Define visualization parameters for NDVI var ndviVis = { min : - 1 , max : 1 , palette : [ 'blue' , 'white' , 'green' ] }; // Define visualization parameters for the composite var compositeVis = { bands : [ 'B4' , 'B3' , 'B2' ], min : 1000 , max : 2700 , gamma : 0.5 }; // Create an NDVI layer var ndviLayer = ui . Map . Layer ( compositeWithNDVI . select ( 'NDVI' ), ndviVis , 'NDVI' , true , 0.9 ); // Add the NDVI layer to the map mapPanel . add ( ndviLayer ); // Add the polyline feature to the map var polylineLayer = ui . Map . Layer ( polylineFeature . geometry (), { color : 'red' , width : 2 }, 'Polygon Boundary' ); // Add the polyline layer to the map mapPanel . add ( polylineLayer ); // Create a true color layer var trueColorLayer = ui . Map . Layer ( composite , compositeVis , 'True Color Composite' , true , 0.9 ); // Add the true color layer to the map mapPanel . add ( trueColorLayer ); // Set center the map on the polygon mapPanel . centerObject ( polygon );","title":"7.2 Add layers"},{"location":"gee_workshop_chapter7/#73-add-checkboxes","text":"// Add checkboxes to the layer panel // Checkbox for NDVI var ndviCheckbox = ui . Checkbox ({ label : 'NDVI' , value : true , onChange : function ( checked ) { if ( checked ) { mapPanel . layers (). add ( ndviLayer ); } else { mapPanel . layers (). remove ( ndviLayer ); } } }); // Add the checkbox to the layer panel layerPanel . add ( ndviCheckbox ); // Checkbox for True Color var trueColorCheckbox = ui . Checkbox ({ label : 'True Color' , value : true , onChange : function ( checked ) { if ( checked ) { mapPanel . layers (). add ( trueColorLayer ); } else { mapPanel . layers (). remove ( trueColorLayer ); } } }); // Add the checkbox to the layer panel layerPanel . add ( trueColorCheckbox ); // Checkbox for Polygon Boundary var polylineCheckbox = ui . Checkbox ({ label : 'Polygon Boundary' , value : true , onChange : function ( checked ) { if ( checked ) { mapPanel . layers (). add ( polylineLayer ); } else { mapPanel . layers (). remove ( polylineLayer ); } } }); // Add the checkbox to the layer panel layerPanel . add ( polylineCheckbox );","title":"7.3 Add checkboxes"},{"location":"gee_workshop_chapter7/#74-add-chart-buttons","text":"// Add a button to the chart panel var chartButton = ui . Button ({ label : 'Show NDVI Chart' , onClick : function () { // Create a chart for NDVI var chart = ui . Chart . image . histogram ({ image : compositeWithNDVI . select ( 'NDVI' ), region : polygon , scale : 30 , minBucketWidth : 0.01 }). setOptions ({ title : 'NDVI Histogram' , hAxis : { title : 'NDVI' }, vAxis : { title : 'Frequency' }, lineWidth : 1 , pointSize : 0 }); // Add the chart to the chart panel chartPanel . add ( chart ); } }); // Add the button to the chart panel chartPanel . add ( chartButton ); var timeSeriesButton = ui . Button ({ label : 'Show NDVI Time Series' , onClick : function () { // Create a time series chart for NDVI var timeSeriesChart = ui . Chart . image . series ({ imageCollection : s2 . select ( 'NDVI' ), region : polygon , scale : 30 , xProperty : 'system:time_start' }). setOptions ({ title : 'NDVI Time Series' , vAxis : { title : 'NDVI' }, lineWidth : 1 , pointSize : 0 }); // Add the chart to the chart panel chartPanel . add ( timeSeriesChart ); } }); // Add the time series button to the chart panel chartPanel . add ( timeSeriesButton );","title":"7.4 Add chart buttons"},{"location":"gee_workshop_chapter8/","text":"8.1 Land use and Land Cover Classification with Google Earth Engine \u00b6 1.Define region of interest and load training data \u00b6 // 1. Supervised land-use classification (5 classes) using Sentinel-2 at two time periods var roi = ee . Geometry . Polygon ([[[ 98.65287970599341 , 17.722345177988142 ], [ 98.65287970599341 , 17.518162943397694 ], [ 98.91105841693091 , 17.518162943397694 ], [ 98.91105841693091 , 17.722345177988142 ]]]); 2.Load training data \u00b6 // 2. Load training data (FeatureCollection of points or polygons with a property 'landcover' 0\u20134) // You must prepare this asset with 5 classes: e.g. 0=Water,1=Urban,2=Agriculture,3=Forest,4=Bare var trainingFC = ee . FeatureCollection ( \"projects/ee-sakda-451407/assets/trainning\" ); print ( trainingFC ); 3.Load Sentinel-2 data and build composites for two date ranges \u00b6 // 3. Load Sentinel-2 and build composites for two date ranges var start1 = '2019-01-01' , end1 = '2019-01-31' ; var start2 = '2025-01-01' , end2 = '2025-01-31' ; function makeComposite ( start , end ) { return ee . ImageCollection ( 'COPERNICUS/S2_SR_HARMONIZED' ) . filterDate ( start , end ) . filterBounds ( roi ) . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) . median () . clip ( roi ); } var comp1 = makeComposite ( start1 , end1 ); var comp2 = makeComposite ( start2 , end2 ); 4.Select spectral bands, sample training data, train classifiers, and classify images \u00b6 // 4. Select spectral bands for classification var bands = [ 'B2' , 'B3' , 'B4' , 'B8' , 'B11' , 'B12' ]; // Blue, Green, Red, NIR, SWIR1, SWIR2 5.Sample the composites at the training points \u00b6 // 5. Sample the composites at the training points var samples1 = comp1 . select ( bands ). sampleRegions ({ collection : trainingFC , properties : [ 'landcover' ], scale : 10 , geometries : true }); var samples2 = comp2 . select ( bands ). sampleRegions ({ collection : trainingFC , properties : [ 'landcover' ], scale : 10 , geometries : true }); 6.Train classifiers and classify the composites \u00b6 // 6. Train classifiers (Random Forest) for each period var classifier1 = ee . Classifier . smileRandomForest ( 100 ) . train ({ features : samples1 , classProperty : 'landcover' , inputProperties : bands }); var classifier2 = ee . Classifier . smileRandomForest ( 100 ) . train ({ features : samples2 , classProperty : 'landcover' , inputProperties : bands }); 7.Classify the composites and define a color palette \u00b6 // 7. Classify the composites var classified1 = comp1 . select ( bands ). classify ( classifier1 ); var classified2 = comp2 . select ( bands ). classify ( classifier2 ); 8.Define a color palette for visualization \u00b6 // 8. Define a 4-class palette var palette = [ '0000FF' , // 0 = Water (blue) 'FF0000' , // 1 = Urban (red) '00FF00' , // 2 = Agriculture (green) '007F00' , // 3 = Forest (dark green) ]; 9.Display the results \u00b6 // 9. Display the results Map . centerObject ( roi ); Map . addLayer ( comp1 , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'True Color 1' , false ); Map . addLayer ( classified1 , { min : 0 , max : 3 , palette : palette }, 'Classified Jan\u2013Mar' , true ); Map . addLayer ( comp2 , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'True Color 2' , false ); Map . addLayer ( classified2 , { min : 0 , max : 3 , palette : palette }, 'Classified Jul\u2013Sep' , true ); 10.Optional: accuracy assessment for the first period \u00b6 // 10. Optional: accuracy assessment for period 1 var trainTest1 = samples1 . randomColumn ( 'rnd' , 42 ); var split = 0.7 ; var trainSet = trainTest1 . filter ( ee . Filter . lt ( 'rnd' , split )); var testSet = trainTest1 . filter ( ee . Filter . gte ( 'rnd' , split )); var trainedRF = ee . Classifier . smileRandomForest ( 100 ) . train ({ features : trainSet , classProperty : 'landcover' , inputProperties : bands }); var validated = testSet . classify ( trainedRF ); var testAccuracy = validated . errorMatrix ( 'landcover' , 'classification' ); print ( 'Confusion matrix (1st period):' , testAccuracy ); print ( 'Overall accuracy:' , testAccuracy . accuracy ()); 11.Perform Change Detection \u00b6 ```javascript // 11. Perform Change Detection // 11.1 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e1a\u0e1a \"\u0e08\u0e32\u0e01-\u0e44\u0e1b\" (From-To Change) // \u0e42\u0e14\u0e22\u0e19\u0e33\u0e04\u0e48\u0e32 class \u0e08\u0e32\u0e01 classified1 \u0e04\u0e39\u0e13 100 \u0e41\u0e25\u0e49\u0e27\u0e1a\u0e27\u0e01\u0e14\u0e49\u0e27\u0e22\u0e04\u0e48\u0e32 class \u0e08\u0e32\u0e01 classified2 // \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e44\u0e14\u0e49\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e39\u0e48\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e44\u0e1b \u0e40\u0e21\u0e37\u0e2d\u0e07(1) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 301 // \u0e19\u0e49\u0e33(0) \u0e44\u0e1b \u0e40\u0e01\u0e29\u0e15\u0e23(2) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 2 // \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e04\u0e07\u0e40\u0e14\u0e34\u0e21\u0e40\u0e1b\u0e47\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 303 var fromToChange = classified1.multiply(100).add(classified2); // \u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e20\u0e32\u0e1e \"from-to change\" \u0e41\u0e1a\u0e1a\u0e14\u0e34\u0e1a (\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e1b\u0e23\u0e31\u0e1a min/max \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49 palette \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21\u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e17\u0e38\u0e01\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) Map.addLayer(fromToChange, {min:0, max:404, palette: ['grey', 'yellow', 'orange', 'red']}, 'From-To Change (Raw)', false); // 11.2 \u0e41\u0e2a\u0e14\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e40\u0e19\u0e49\u0e19\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e1a\u0e32\u0e07\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 // \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49 (class 3) \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e21\u0e37\u0e2d\u0e07 (class 1) var forestToUrban = fromToChange.eq(301); // 3*100 + 1 = 301 Map.addLayer(forestToUrban.selfMask(), {palette: ['FF00FF']}, 'Change: Forest to Urban', true); // \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e29\u0e15\u0e23 (class 2) \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e21\u0e37\u0e2d\u0e07 (class 1) var agricultureToUrban = fromToChange.eq(201); // 2*100 + 1 = 201 Map.addLayer(agricultureToUrban.selfMask(), {palette: ['FFA500']}, 'Change: Agriculture to Urban', false); // \u0e40\u0e0a\u0e48\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e41\u0e25\u0e30\u0e22\u0e31\u0e07\u0e04\u0e07\u0e40\u0e1b\u0e47\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49 (class 3) var stableForest = fromToChange.eq(303); // 3*100 + 3 = 303 Map.addLayer(stableForest.selfMask(), {palette: ['004D00']}, 'Stable: Forest', false); // 11.3 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e1a\u0e1a Binary (\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 / \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) // \u0e42\u0e14\u0e22\u0e17\u0e35\u0e48 1 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07, 0 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 var binaryChange = classified1.neq(classified2); // \u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e20\u0e32\u0e1e binary change (\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e35\u0e41\u0e14\u0e07\u0e04\u0e37\u0e2d\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) Map.addLayer(binaryChange.selfMask(), {palette: ['FF0000']}, 'Binary Change (Any Change)', true); // 12. (\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21) \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 (\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07) // \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48 function calculateArea(image, geometry, scale) { var areaImage = image.multiply(ee.Image.pixelArea()); var area = areaImage.reduceRegion({ reducer: ee.Reducer.sum(), geometry: geometry, scale: scale, maxPixels: 1e13 }); return ee.Number(area.get(image.bandNames().get(0))).divide(10000); // m^2 to hectares } // \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e08\u0e32\u0e01\u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e21\u0e37\u0e2d\u0e07 var areaForestToUrban_ha = calculateArea(forestToUrban, roi, 10); print('Area changed from Forest to Urban (hectares):', areaForestToUrban_ha); // \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (binary change) var areaAnyChange_ha = calculateArea(binaryChange, roi, 10); print('Total area with any change (hectares):', areaAnyChange_ha);","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 8"},{"location":"gee_workshop_chapter8/#81-land-use-and-land-cover-classification-with-google-earth-engine","text":"","title":"8.1 Land use and Land Cover Classification with Google Earth Engine"},{"location":"gee_workshop_chapter8/#1define-region-of-interest-and-load-training-data","text":"// 1. Supervised land-use classification (5 classes) using Sentinel-2 at two time periods var roi = ee . Geometry . Polygon ([[[ 98.65287970599341 , 17.722345177988142 ], [ 98.65287970599341 , 17.518162943397694 ], [ 98.91105841693091 , 17.518162943397694 ], [ 98.91105841693091 , 17.722345177988142 ]]]);","title":"1.Define region of interest and load training data"},{"location":"gee_workshop_chapter8/#2load-training-data","text":"// 2. Load training data (FeatureCollection of points or polygons with a property 'landcover' 0\u20134) // You must prepare this asset with 5 classes: e.g. 0=Water,1=Urban,2=Agriculture,3=Forest,4=Bare var trainingFC = ee . FeatureCollection ( \"projects/ee-sakda-451407/assets/trainning\" ); print ( trainingFC );","title":"2.Load training data"},{"location":"gee_workshop_chapter8/#3load-sentinel-2-data-and-build-composites-for-two-date-ranges","text":"// 3. Load Sentinel-2 and build composites for two date ranges var start1 = '2019-01-01' , end1 = '2019-01-31' ; var start2 = '2025-01-01' , end2 = '2025-01-31' ; function makeComposite ( start , end ) { return ee . ImageCollection ( 'COPERNICUS/S2_SR_HARMONIZED' ) . filterDate ( start , end ) . filterBounds ( roi ) . filter ( ee . Filter . lt ( 'CLOUDY_PIXEL_PERCENTAGE' , 20 )) . median () . clip ( roi ); } var comp1 = makeComposite ( start1 , end1 ); var comp2 = makeComposite ( start2 , end2 );","title":"3.Load Sentinel-2 data and build composites for two date ranges"},{"location":"gee_workshop_chapter8/#4select-spectral-bands-sample-training-data-train-classifiers-and-classify-images","text":"// 4. Select spectral bands for classification var bands = [ 'B2' , 'B3' , 'B4' , 'B8' , 'B11' , 'B12' ]; // Blue, Green, Red, NIR, SWIR1, SWIR2","title":"4.Select spectral bands, sample training data, train classifiers, and classify images"},{"location":"gee_workshop_chapter8/#5sample-the-composites-at-the-training-points","text":"// 5. Sample the composites at the training points var samples1 = comp1 . select ( bands ). sampleRegions ({ collection : trainingFC , properties : [ 'landcover' ], scale : 10 , geometries : true }); var samples2 = comp2 . select ( bands ). sampleRegions ({ collection : trainingFC , properties : [ 'landcover' ], scale : 10 , geometries : true });","title":"5.Sample the composites at the training points"},{"location":"gee_workshop_chapter8/#6train-classifiers-and-classify-the-composites","text":"// 6. Train classifiers (Random Forest) for each period var classifier1 = ee . Classifier . smileRandomForest ( 100 ) . train ({ features : samples1 , classProperty : 'landcover' , inputProperties : bands }); var classifier2 = ee . Classifier . smileRandomForest ( 100 ) . train ({ features : samples2 , classProperty : 'landcover' , inputProperties : bands });","title":"6.Train classifiers and classify the composites"},{"location":"gee_workshop_chapter8/#7classify-the-composites-and-define-a-color-palette","text":"// 7. Classify the composites var classified1 = comp1 . select ( bands ). classify ( classifier1 ); var classified2 = comp2 . select ( bands ). classify ( classifier2 );","title":"7.Classify the composites and define a color palette"},{"location":"gee_workshop_chapter8/#8define-a-color-palette-for-visualization","text":"// 8. Define a 4-class palette var palette = [ '0000FF' , // 0 = Water (blue) 'FF0000' , // 1 = Urban (red) '00FF00' , // 2 = Agriculture (green) '007F00' , // 3 = Forest (dark green) ];","title":"8.Define a color palette for visualization"},{"location":"gee_workshop_chapter8/#9display-the-results","text":"// 9. Display the results Map . centerObject ( roi ); Map . addLayer ( comp1 , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'True Color 1' , false ); Map . addLayer ( classified1 , { min : 0 , max : 3 , palette : palette }, 'Classified Jan\u2013Mar' , true ); Map . addLayer ( comp2 , { bands : [ 'B4' , 'B3' , 'B2' ], min : 0 , max : 3000 }, 'True Color 2' , false ); Map . addLayer ( classified2 , { min : 0 , max : 3 , palette : palette }, 'Classified Jul\u2013Sep' , true );","title":"9.Display the results"},{"location":"gee_workshop_chapter8/#10optional-accuracy-assessment-for-the-first-period","text":"// 10. Optional: accuracy assessment for period 1 var trainTest1 = samples1 . randomColumn ( 'rnd' , 42 ); var split = 0.7 ; var trainSet = trainTest1 . filter ( ee . Filter . lt ( 'rnd' , split )); var testSet = trainTest1 . filter ( ee . Filter . gte ( 'rnd' , split )); var trainedRF = ee . Classifier . smileRandomForest ( 100 ) . train ({ features : trainSet , classProperty : 'landcover' , inputProperties : bands }); var validated = testSet . classify ( trainedRF ); var testAccuracy = validated . errorMatrix ( 'landcover' , 'classification' ); print ( 'Confusion matrix (1st period):' , testAccuracy ); print ( 'Overall accuracy:' , testAccuracy . accuracy ());","title":"10.Optional: accuracy assessment for the first period"},{"location":"gee_workshop_chapter8/#11perform-change-detection","text":"```javascript // 11. Perform Change Detection // 11.1 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e1a\u0e1a \"\u0e08\u0e32\u0e01-\u0e44\u0e1b\" (From-To Change) // \u0e42\u0e14\u0e22\u0e19\u0e33\u0e04\u0e48\u0e32 class \u0e08\u0e32\u0e01 classified1 \u0e04\u0e39\u0e13 100 \u0e41\u0e25\u0e49\u0e27\u0e1a\u0e27\u0e01\u0e14\u0e49\u0e27\u0e22\u0e04\u0e48\u0e32 class \u0e08\u0e32\u0e01 classified2 // \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e44\u0e14\u0e49\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e39\u0e48\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e44\u0e1b \u0e40\u0e21\u0e37\u0e2d\u0e07(1) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 301 // \u0e19\u0e49\u0e33(0) \u0e44\u0e1b \u0e40\u0e01\u0e29\u0e15\u0e23(2) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 2 // \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e04\u0e07\u0e40\u0e14\u0e34\u0e21\u0e40\u0e1b\u0e47\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 303 var fromToChange = classified1.multiply(100).add(classified2); // \u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e20\u0e32\u0e1e \"from-to change\" \u0e41\u0e1a\u0e1a\u0e14\u0e34\u0e1a (\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e1b\u0e23\u0e31\u0e1a min/max \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49 palette \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21\u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e17\u0e38\u0e01\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) Map.addLayer(fromToChange, {min:0, max:404, palette: ['grey', 'yellow', 'orange', 'red']}, 'From-To Change (Raw)', false); // 11.2 \u0e41\u0e2a\u0e14\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e40\u0e19\u0e49\u0e19\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e1a\u0e32\u0e07\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 // \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49 (class 3) \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e21\u0e37\u0e2d\u0e07 (class 1) var forestToUrban = fromToChange.eq(301); // 3*100 + 1 = 301 Map.addLayer(forestToUrban.selfMask(), {palette: ['FF00FF']}, 'Change: Forest to Urban', true); // \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e29\u0e15\u0e23 (class 2) \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e21\u0e37\u0e2d\u0e07 (class 1) var agricultureToUrban = fromToChange.eq(201); // 2*100 + 1 = 201 Map.addLayer(agricultureToUrban.selfMask(), {palette: ['FFA500']}, 'Change: Agriculture to Urban', false); // \u0e40\u0e0a\u0e48\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e41\u0e25\u0e30\u0e22\u0e31\u0e07\u0e04\u0e07\u0e40\u0e1b\u0e47\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49 (class 3) var stableForest = fromToChange.eq(303); // 3*100 + 3 = 303 Map.addLayer(stableForest.selfMask(), {palette: ['004D00']}, 'Stable: Forest', false); // 11.3 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e1a\u0e1a Binary (\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 / \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) // \u0e42\u0e14\u0e22\u0e17\u0e35\u0e48 1 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07, 0 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 var binaryChange = classified1.neq(classified2); // \u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e20\u0e32\u0e1e binary change (\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e35\u0e41\u0e14\u0e07\u0e04\u0e37\u0e2d\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) Map.addLayer(binaryChange.selfMask(), {palette: ['FF0000']}, 'Binary Change (Any Change)', true); // 12. (\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21) \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 (\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07) // \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48 function calculateArea(image, geometry, scale) { var areaImage = image.multiply(ee.Image.pixelArea()); var area = areaImage.reduceRegion({ reducer: ee.Reducer.sum(), geometry: geometry, scale: scale, maxPixels: 1e13 }); return ee.Number(area.get(image.bandNames().get(0))).divide(10000); // m^2 to hectares } // \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e08\u0e32\u0e01\u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e21\u0e37\u0e2d\u0e07 var areaForestToUrban_ha = calculateArea(forestToUrban, roi, 10); print('Area changed from Forest to Urban (hectares):', areaForestToUrban_ha); // \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (binary change) var areaAnyChange_ha = calculateArea(binaryChange, roi, 10); print('Total area with any change (hectares):', areaAnyChange_ha);","title":"11.Perform Change Detection"},{"location":"gee_workshop_chapter9/","text":"9.1 Flood Detection using Sentinel-1 SAR Data \u00b6 Credit: UN-SPIDER 1.\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e28\u0e36\u0e01\u0e29\u0e32 (Region of Interest) \u00b6 // 1. Define region of interest (adjust coordinates as needed) var geometry = ee . Geometry . Polygon ( [[[ 99.78173820585737 , 20.530460641212706 ], [ 99.78173820585737 , 20.343223656107035 ], [ 100.15664665312299 , 20.343223656107035 ], [ 100.15664665312299 , 20.530460641212706 ]]]); // 2. Define the area of interest as a FeatureCollection var aoi = ee . FeatureCollection ( geometry ); 2.\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e2a\u0e19\u0e43\u0e08 \u00b6 // 3. Define date ranges for before and after flood events var before_start = '2024-01-01' ; var before_end = '2024-05-24' ; var after_start = '2024-09-15' ; var after_end = '2024-10-10' ; 3.\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Sentinel-1 \u0e41\u0e25\u0e30\u0e01\u0e23\u0e2d\u0e07\u0e15\u0e32\u0e21\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14 \u00b6 // 4. Define parameters for Sentinel-1 data var polarization = \"VH\" ; // 'VV' 'VH' var pass_direction = \"DESCENDING\" ; // 'DESCENDING' \u0e2b\u0e23\u0e37\u0e2d 'ASCENDING' // Load and filter Sentinel-1 GRD var collection = ee . ImageCollection ( 'COPERNICUS/S1_GRD' ) . filter ( ee . Filter . eq ( 'instrumentMode' , 'IW' )) . filter ( ee . Filter . listContains ( 'transmitterReceiverPolarisation' , polarization )) . filter ( ee . Filter . eq ( 'orbitProperties_pass' , pass_direction )) . filter ( ee . Filter . eq ( 'resolution_meters' , 10 )) //.filter(ee.Filter.eq('relativeOrbitNumber_start',relative_orbit )) . filterBounds ( aoi ) . select ( polarization ); // Filter date var before_collection = collection . filterDate ( before_start , before_end ); var after_collection = collection . filterDate ( after_start , after_end ); // Create mosaics for before and after periods var before = before_collection . mosaic (). clip ( aoi ); var after = after_collection . mosaic (). clip ( aoi ); 4.\u0e04\u0e33\u0e19\u0e27\u0e13\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e23\u0e14\u0e32\u0e23\u0e4c\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e2a\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32 \u00b6 // 5. Calculate the difference in backscatter between the two periods var smoothing_radius = 25 ; var before_filtered = before . focal_mean ( smoothing_radius , 'circle' , 'meters' ); var after_filtered = after . focal_mean ( smoothing_radius , 'circle' , 'meters' ); // Define a threshold for flood detection var difference_threshold = - 5.5 ; var difference_db = after_filtered . subtract ( before_filtered ); var difference_binary = difference_db . lte ( difference_threshold ); var flood_raw_mask = difference_db . updateMask ( difference_binary ); 5.\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07 mask \u0e19\u0e49\u0e33\u0e17\u0e48\u0e27\u0e21\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e40\u0e01\u0e13\u0e11\u0e4c\u0e2d\u0e37\u0e48\u0e19 \u0e46 \u00b6 // 6. Refine the flood mask using additional criteria var swater = ee . Image ( 'JRC/GSW1_0/GlobalSurfaceWater' ). select ( 'seasonality' ); var swater_mask = swater . gte ( 5 ). updateMask ( swater . gte ( 5 )); var flooded_mask = difference_binary . where ( swater_mask , 0 ); var flooded = flooded_mask . updateMask ( flooded_mask ); var connections = flooded . connectedPixelCount (); var flooded = flooded . updateMask ( connections . gte ( 8 )); var dem = ee . Image ( 'WWF/HydroSHEDS/03VFDEM' ); var terrain = ee . Algorithms . Terrain ( dem ); var slope = terrain . select ( 'slope' ); var flooded = flooded . updateMask ( slope . lt ( 5 )); 6.\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c \u00b6 // 7. Display the results Map . centerObject ( aoi ); Map . addLayer ( before_filtered , { min : - 25 , max : 0 }, 'Before Flood' , 0 ); Map . addLayer ( after_filtered , { min : - 25 , max : 0 }, 'After Flood' , 1 ); Map . addLayer ( difference_db , { min : - 5 , max : 5 }, 'Difference (dB)' , 0 ); Map . addLayer ( flood_raw_mask , { palette : 'blue' }, 'Flooded (raw)' , 0 ); Map . addLayer ( flooded , { palette : 'blue' }, 'Flooded Areas' , 1 ); 9.2 Drought Monitoring using CHIRPS Precipitation Data \u00b6 1.\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Thailand boundary \u0e41\u0e25\u0e30 CHIRPS monthly precipitation \u00b6 // 1. Load Thailand boundary var thailand = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ) . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); // 2. Load CHIRPS monthly precipitation and select the \u2018precipitation\u2019 band var precip = ee . ImageCollection ( 'UCSB-CHG/CHIRPS/DAILY' ) . select ( 'precipitation' ); 2.Calculate Standardized Precipitation Index (SPI) for 3-month periods \u00b6 // 3. Define the \u201ccurrent\u201d 3-month period ending April 2025 var targetDate = ee . Date ( '2024-01-01' ); var startPeriod = targetDate . advance ( 3 , 'month' ); print ( startPeriod ); var current3mo = precip . filterDate ( targetDate , startPeriod ) . sum (); 3.Build a time series of historical 3-month sums \u00b6 // 4. Build a time series of historical 3-month sums (April\u2013June each year) var years = ee . List . sequence ( 1981 , 2023 ); var historical3mo = ee . ImageCollection . fromImages ( years . map ( function ( y ) { var start = ee . Date . fromYMD ( y , 1 , 1 ); //.advance(3, 'month'); // window start = April 1 var end = start . advance ( 3 , 'month' ); return precip . filterDate ( start , end ) . sum () . set ( 'system:time_start' , start . millis ()); }) ); print ( historical3mo ); 4.Compute mean and standard deviation images from the historical period \u00b6 // 5. Compute mean and standard deviation images from the historical period var mean3mo = historical3mo . mean (); var stddev3mo = historical3mo . reduce ( ee . Reducer . stdDev ()); print ( mean3mo ); 5.Calculate the SPI-3 (approximate) as standardized anomaly \u00b6 // 6. Calculate the SPI-3 (approximate) as standardized anomaly var spi3 = current3mo . subtract ( mean3mo ) . divide ( stddev3mo ) . clip ( thailand ); 6.Visualization parameters for SPI \u00b6 // 7. Visualization parameters for SPI var spiVis = { min : - 2 , max : 2 , palette : [ '#d73027' , // <= -1.5 (severe drought) '#fc8d59' , // -1.5 to -1.0 '#fee08b' , // -1.0 to -0.5 '#d9ef8b' , // -0.5 to 0.5 (near normal) '#91cf60' , // 0.5 to 1.0 '#1a9850' // > 1.0 (wet) ] }; 7.Display the SPI layer and add a legend \u00b6 // 8. Display the SPI layer Map . centerObject ( thailand , 6 ); Map . addLayer ( spi3 , spiVis , 'SPI-3 Apr 2024' ); // 9. Add a legend panel var legend = ui . Panel ({ style : { position : 'bottom-left' , padding : '8px 15px' , backgroundColor : 'white' , fontWeight : 'bold' } }); legend . add ( ui . Label ( 'SPI-3 Legend' )); var makeRow = function ( color , name ) { var colorBox = ui . Label ({ style : { backgroundColor : color , padding : '8px' , margin : '0 0 4px 0' } }); var description = ui . Label ( name , { margin : '0 0 4px 6px' }); return ui . Panel ([ colorBox , description ], ui . Panel . Layout . Flow ( 'horizontal' )); }; var palette = spiVis . palette ; var names = [ '<= -1.5' , '-1.5 to -1.0' , '-1.0 to -0.5' , '-0.5 to 0.5' , '0.5 to 1.0' , '> 1.0' ]; palette . forEach ( function ( color , i ) { legend . add ( makeRow ( color , names [ i ])); }); Map . addLayer ( current3mo . clip ( thailand ), { min : 0 , max : 400 , palette : [ '#FFFFFF' , '#ADD8E6' , '#0000CD' , '#00008B' ] }, 'current-rain' ); Map . addLayer ( historical3mo . mean (). clip ( thailand ), { min : 0 , max : 500 , palette : [ '#FFFFFF' , '#ADD8E6' , '#0000CD' , '#00008B' ] }, '3m-rain' ); Map . add ( legend );","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 9"},{"location":"gee_workshop_chapter9/#91-flood-detection-using-sentinel-1-sar-data","text":"Credit: UN-SPIDER","title":"9.1 Flood Detection using Sentinel-1 SAR Data"},{"location":"gee_workshop_chapter9/#1-region-of-interest","text":"// 1. Define region of interest (adjust coordinates as needed) var geometry = ee . Geometry . Polygon ( [[[ 99.78173820585737 , 20.530460641212706 ], [ 99.78173820585737 , 20.343223656107035 ], [ 100.15664665312299 , 20.343223656107035 ], [ 100.15664665312299 , 20.530460641212706 ]]]); // 2. Define the area of interest as a FeatureCollection var aoi = ee . FeatureCollection ( geometry );","title":"1.\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e28\u0e36\u0e01\u0e29\u0e32 (Region of Interest)"},{"location":"gee_workshop_chapter9/#2","text":"// 3. Define date ranges for before and after flood events var before_start = '2024-01-01' ; var before_end = '2024-05-24' ; var after_start = '2024-09-15' ; var after_end = '2024-10-10' ;","title":"2.\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e2a\u0e19\u0e43\u0e08"},{"location":"gee_workshop_chapter9/#3-sentinel-1","text":"// 4. Define parameters for Sentinel-1 data var polarization = \"VH\" ; // 'VV' 'VH' var pass_direction = \"DESCENDING\" ; // 'DESCENDING' \u0e2b\u0e23\u0e37\u0e2d 'ASCENDING' // Load and filter Sentinel-1 GRD var collection = ee . ImageCollection ( 'COPERNICUS/S1_GRD' ) . filter ( ee . Filter . eq ( 'instrumentMode' , 'IW' )) . filter ( ee . Filter . listContains ( 'transmitterReceiverPolarisation' , polarization )) . filter ( ee . Filter . eq ( 'orbitProperties_pass' , pass_direction )) . filter ( ee . Filter . eq ( 'resolution_meters' , 10 )) //.filter(ee.Filter.eq('relativeOrbitNumber_start',relative_orbit )) . filterBounds ( aoi ) . select ( polarization ); // Filter date var before_collection = collection . filterDate ( before_start , before_end ); var after_collection = collection . filterDate ( after_start , after_end ); // Create mosaics for before and after periods var before = before_collection . mosaic (). clip ( aoi ); var after = after_collection . mosaic (). clip ( aoi );","title":"3.\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Sentinel-1 \u0e41\u0e25\u0e30\u0e01\u0e23\u0e2d\u0e07\u0e15\u0e32\u0e21\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14"},{"location":"gee_workshop_chapter9/#4","text":"// 5. Calculate the difference in backscatter between the two periods var smoothing_radius = 25 ; var before_filtered = before . focal_mean ( smoothing_radius , 'circle' , 'meters' ); var after_filtered = after . focal_mean ( smoothing_radius , 'circle' , 'meters' ); // Define a threshold for flood detection var difference_threshold = - 5.5 ; var difference_db = after_filtered . subtract ( before_filtered ); var difference_binary = difference_db . lte ( difference_threshold ); var flood_raw_mask = difference_db . updateMask ( difference_binary );","title":"4.\u0e04\u0e33\u0e19\u0e27\u0e13\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e23\u0e14\u0e32\u0e23\u0e4c\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e2a\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32"},{"location":"gee_workshop_chapter9/#5-mask","text":"// 6. Refine the flood mask using additional criteria var swater = ee . Image ( 'JRC/GSW1_0/GlobalSurfaceWater' ). select ( 'seasonality' ); var swater_mask = swater . gte ( 5 ). updateMask ( swater . gte ( 5 )); var flooded_mask = difference_binary . where ( swater_mask , 0 ); var flooded = flooded_mask . updateMask ( flooded_mask ); var connections = flooded . connectedPixelCount (); var flooded = flooded . updateMask ( connections . gte ( 8 )); var dem = ee . Image ( 'WWF/HydroSHEDS/03VFDEM' ); var terrain = ee . Algorithms . Terrain ( dem ); var slope = terrain . select ( 'slope' ); var flooded = flooded . updateMask ( slope . lt ( 5 ));","title":"5.\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07 mask \u0e19\u0e49\u0e33\u0e17\u0e48\u0e27\u0e21\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e40\u0e01\u0e13\u0e11\u0e4c\u0e2d\u0e37\u0e48\u0e19 \u0e46"},{"location":"gee_workshop_chapter9/#6","text":"// 7. Display the results Map . centerObject ( aoi ); Map . addLayer ( before_filtered , { min : - 25 , max : 0 }, 'Before Flood' , 0 ); Map . addLayer ( after_filtered , { min : - 25 , max : 0 }, 'After Flood' , 1 ); Map . addLayer ( difference_db , { min : - 5 , max : 5 }, 'Difference (dB)' , 0 ); Map . addLayer ( flood_raw_mask , { palette : 'blue' }, 'Flooded (raw)' , 0 ); Map . addLayer ( flooded , { palette : 'blue' }, 'Flooded Areas' , 1 );","title":"6.\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c"},{"location":"gee_workshop_chapter9/#92-drought-monitoring-using-chirps-precipitation-data","text":"","title":"9.2 Drought Monitoring using CHIRPS Precipitation Data"},{"location":"gee_workshop_chapter9/#1-thailand-boundary-chirps-monthly-precipitation","text":"// 1. Load Thailand boundary var thailand = ee . FeatureCollection ( 'USDOS/LSIB_SIMPLE/2017' ) . filter ( ee . Filter . eq ( 'country_na' , 'Thailand' )); // 2. Load CHIRPS monthly precipitation and select the \u2018precipitation\u2019 band var precip = ee . ImageCollection ( 'UCSB-CHG/CHIRPS/DAILY' ) . select ( 'precipitation' );","title":"1.\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Thailand boundary \u0e41\u0e25\u0e30 CHIRPS monthly precipitation"},{"location":"gee_workshop_chapter9/#2calculate-standardized-precipitation-index-spi-for-3-month-periods","text":"// 3. Define the \u201ccurrent\u201d 3-month period ending April 2025 var targetDate = ee . Date ( '2024-01-01' ); var startPeriod = targetDate . advance ( 3 , 'month' ); print ( startPeriod ); var current3mo = precip . filterDate ( targetDate , startPeriod ) . sum ();","title":"2.Calculate Standardized Precipitation Index (SPI) for 3-month periods"},{"location":"gee_workshop_chapter9/#3build-a-time-series-of-historical-3-month-sums","text":"// 4. Build a time series of historical 3-month sums (April\u2013June each year) var years = ee . List . sequence ( 1981 , 2023 ); var historical3mo = ee . ImageCollection . fromImages ( years . map ( function ( y ) { var start = ee . Date . fromYMD ( y , 1 , 1 ); //.advance(3, 'month'); // window start = April 1 var end = start . advance ( 3 , 'month' ); return precip . filterDate ( start , end ) . sum () . set ( 'system:time_start' , start . millis ()); }) ); print ( historical3mo );","title":"3.Build a time series of historical 3-month sums"},{"location":"gee_workshop_chapter9/#4compute-mean-and-standard-deviation-images-from-the-historical-period","text":"// 5. Compute mean and standard deviation images from the historical period var mean3mo = historical3mo . mean (); var stddev3mo = historical3mo . reduce ( ee . Reducer . stdDev ()); print ( mean3mo );","title":"4.Compute mean and standard deviation images from the historical period"},{"location":"gee_workshop_chapter9/#5calculate-the-spi-3-approximate-as-standardized-anomaly","text":"// 6. Calculate the SPI-3 (approximate) as standardized anomaly var spi3 = current3mo . subtract ( mean3mo ) . divide ( stddev3mo ) . clip ( thailand );","title":"5.Calculate the SPI-3 (approximate) as standardized anomaly"},{"location":"gee_workshop_chapter9/#6visualization-parameters-for-spi","text":"// 7. Visualization parameters for SPI var spiVis = { min : - 2 , max : 2 , palette : [ '#d73027' , // <= -1.5 (severe drought) '#fc8d59' , // -1.5 to -1.0 '#fee08b' , // -1.0 to -0.5 '#d9ef8b' , // -0.5 to 0.5 (near normal) '#91cf60' , // 0.5 to 1.0 '#1a9850' // > 1.0 (wet) ] };","title":"6.Visualization parameters for SPI"},{"location":"gee_workshop_chapter9/#7display-the-spi-layer-and-add-a-legend","text":"// 8. Display the SPI layer Map . centerObject ( thailand , 6 ); Map . addLayer ( spi3 , spiVis , 'SPI-3 Apr 2024' ); // 9. Add a legend panel var legend = ui . Panel ({ style : { position : 'bottom-left' , padding : '8px 15px' , backgroundColor : 'white' , fontWeight : 'bold' } }); legend . add ( ui . Label ( 'SPI-3 Legend' )); var makeRow = function ( color , name ) { var colorBox = ui . Label ({ style : { backgroundColor : color , padding : '8px' , margin : '0 0 4px 0' } }); var description = ui . Label ( name , { margin : '0 0 4px 6px' }); return ui . Panel ([ colorBox , description ], ui . Panel . Layout . Flow ( 'horizontal' )); }; var palette = spiVis . palette ; var names = [ '<= -1.5' , '-1.5 to -1.0' , '-1.0 to -0.5' , '-0.5 to 0.5' , '0.5 to 1.0' , '> 1.0' ]; palette . forEach ( function ( color , i ) { legend . add ( makeRow ( color , names [ i ])); }); Map . addLayer ( current3mo . clip ( thailand ), { min : 0 , max : 400 , palette : [ '#FFFFFF' , '#ADD8E6' , '#0000CD' , '#00008B' ] }, 'current-rain' ); Map . addLayer ( historical3mo . mean (). clip ( thailand ), { min : 0 , max : 500 , palette : [ '#FFFFFF' , '#ADD8E6' , '#0000CD' , '#00008B' ] }, '3m-rain' ); Map . add ( legend );","title":"7.Display the SPI layer and add a legend"}]}